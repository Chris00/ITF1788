#
#                              ITF1788
#
#   Interval Test Framework for IEEE 1788 Standard for Interval Arithmetic
#
#
#   Copyright 2015 Oliver Heimlich (oheim@posteo.de)
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

# misc
imports: |
    // Note: Gaol must be configured with `--enable-relations=set` to make == comparison work as expected
    #include <gaol/gaol>
preamble: |
    using namespace gaol;

# intervals
empty_interval_double: interval::emptyset()
entire_interval_double: interval::universe()
inf_sup_interval_double: interval($ARG1, $ARG2)

# Set operations
op_intersection*: $ARG1 & $ARG2
op_convexHull*: $ARG1 | $ARG2

# Constructors
op_numsToInterval*: interval($ARG1, $ARG2)
op_textToInterval*: interval($ARG1)

# Basic operations
op_pos*: +$ARG1
op_neg*: -($ARG1)
op_add*: $ARG1 + $ARG2
op_sub*: $ARG1 - $ARG2
op_mul*: $ARG1 * $ARG2
op_div*: $ARG1 / $ARG2
op_inv*: $ARG1.inverse()
op_sqr*: sqr($ARG1)
op_sqrt*: sqrt($ARG1)

# Power functions
op_pow*: pow($ARG1, $ARG2)
op_exp*: exp($ARG1)
op_log*: log($ARG1)

# Trigonometric/hyperbolic functions
op_sin*: sin($ARG1)
op_cos*: cos($ARG1)
op_tan*: tan($ARG1)
op_asin*: asin($ARG1)
op_acos*: acos($ARG1)
op_atan*: atan($ARG1)
op_sinh*: sinh($ARG1)
op_cosh*: cosh($ARG1)
op_tanh*: tanh($ARG1)
op_asinh*: asinh($ARG1)
op_acosh*: acosh($ARG1)
op_atanh*: atanh($ARG1)

# Absmax functions
op_abs*: abs($ARG1)

# Numeric functions of intervals
op_inf*: $ARG1.left()
op_sup*: $ARG1.right()
op_mid*: $ARG1.midpoint()
op_wid*: $ARG1.width()
op_mag*: $ARG1.mag()
op_mig*: $ARG1.mig()

# Boolean functions of intervals
op_equal*: $ARG1.set_eq($ARG2)
op_subset*: $ARG2.set_contains($ARG1)
op_interior*: $ARG2.set_strictly_contains($ARG1)
op_disjoint*: $ARG1.set_disjoint($ARG2)
op_isEmpty*: $ARG1.is_empty()
op_less*: $ARG1.set_leq($ARG2)
op_strictLess*: $ARG1.set_le($ARG2)
op_isMember*: $ARG2.set_contains($ARG1)

# Reverse-mode elementary functions
op_absRev*: invabs_rel($ARG1, interval::universe())
op_absRevBin*: invabs_rel($ARG1, $ARG2)
op_sqrRev*: sqrt_rel($ARG1, interval::universe())
op_sqrRevBin*: sqrt_rel($ARG1, $ARG2)
op_pownRev*: nth_root_rel($ARG1, $ARG2, interval::universe())
op_pownRevBin*: nth_root_rel($ARG1, $ARG3, $ARG2)
op_sinRev*: asin_rel($ARG1, interval::universe())
op_sinRevBin*: asin_rel($ARG1, $ARG2)
op_cosRev*: acos_rel($ARG1, interval::universe())
op_cosRevBin*: acos_rel($ARG1, $ARG2)
op_tanRev*: atan_rel($ARG1, interval::universe())
op_tanRevBin*: atan_rel($ARG1, $ARG2)
op_coshRev*: acosh_rel($ARG1, interval::universe())
op_coshRevBin*: acosh_rel($ARG1, $ARG2)
op_mulRev*: div_rel($ARG1, $ARG2, interval::universe())
op_mulRevTen*: div_rel($ARG1, $ARG2, $ARG3)


# Decorated intervals are not supported
#op_decorationPart*: '"$ARG1"'
decorator_less_equals: |
    # $ARG1 $ARG2
decorator_greater_equals: |
    # $ARG1 $ARG2
decorated_empty_interval_double: '"[Empty]_$DEC"'
decorated_entire_interval_double: '"[Entire]_$DEC"'
decorated_inf_sup_interval_double: '"[$ARG1, $ARG2]_$DEC"'
decorator_com: com
decorator_def: def
decorator_dac: dac
decorator_ill: ill
decorator_trv: trv

