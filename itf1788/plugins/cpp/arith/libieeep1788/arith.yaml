#
#                              ITF1788
#
#   Interval Test Framework for IEEE 1788 Standard for Interval Arithmetic
#
#
#   Copyright 2014
#
#   Marco Nehmeier (nehmeier@informatik.uni-wuerzburg.de)
#   Maximilian Kiesner (maximilian.kiesner@stud-mail.uni-wuerzburg.de)
#
#   Department of Computer Science
#   University of Wuerzburg, Germany
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

# misc
imports: |
    #include <p1788/p1788.hpp>
    #include <limits>
preamble: |
    template<typename T>
    using I = p1788::infsup::interval<T, p1788::flavor::infsup::setbased::mpfr_bin_ieee754_flavor>;

    template<typename T>
    using DI = p1788::infsup::decorated_interval<T, p1788::flavor::infsup::setbased::mpfr_bin_ieee754_flavor>;

    typedef p1788::decoration::decoration DEC;
    typedef p1788::overlapping::overlapping_state OVERLAP;

# intervals
nai_interval_double: DI<double>::nai()
nai_interval_float: DI<float>::nai()
nai_interval_long_double: DI<long double>::nai()

empty_interval_double: I<double>::empty()
empty_interval_float: I<float>::empty()
empty_interval_long_double: I<long double>::empty()

entire_interval_double: I<double>::entire()
entire_interval_float: I<float>::entire()
entire_interval_long_double: I<long double>::entire()

decorated_empty_interval_double: DI<double>::empty()
decorated_empty_interval_float: DI<float>::empty()
decorated_empty_interval_long_double: DI<long double>::empty()

decorated_entire_interval_double: DI<double>(-INFINITY, INFINITY, $DEC)
decorated_entire_interval_float: DI<float>(-INFINITY, INFINITY, $DEC)
decorated_entire_interval_long_double: DI<long double>(-INFINITY, INFINITY, $DEC)

inf_sup_interval_double: I<double>(${ARG1}, ${ARG2})
inf_sup_interval_float: I<float>($ARG1, $ARG2)
inf_sup_interval_long_double: I<long double>($ARG1, $ARG2)

decorated_inf_sup_interval_double: DI<double>($ARG1, $ARG2, $DEC)
decorated_inf_sup_interval_float: DI<float>($ARG1, $ARG2, $DEC)
decorated_inf_sup_interval_long_double: DI<long double>($ARG1, $ARG2, $DEC)


# interval decorators
decorator_com: DEC::com
decorator_def: DEC::def
decorator_dac: DEC::dac
decorator_ill: DEC::ill
decorator_trv: DEC::trv

# comparison of decorations
decorator_less_equals: ($ARG1 <= $ARG2)
decorator_greater_equals: ($ARG1 >= $ARG2)


# overlap literal translations
overlap_bothEmpty: OVERLAP::both_empty
overlap_firstEmpty: OVERLAP::first_empty
overlap_secondEmpty: OVERLAP::second_empty
overlap_before: OVERLAP::before
overlap_meets: OVERLAP::meets
overlap_overlaps: OVERLAP::overlaps
overlap_starts: OVERLAP::starts
overlap_containedBy: OVERLAP::contained_by
overlap_finishes: OVERLAP::finishes
overlap_equals: OVERLAP::equal
overlap_finishedBy: OVERLAP::finished_by
overlap_contains: OVERLAP::contains
overlap_startedBy: OVERLAP::started_by
overlap_overlappedBy: OVERLAP::overlapped_by
overlap_metBy: OVERLAP::met_by
overlap_after: OVERLAP::after

# Cancellative addition and subtraction
op_cancelMinus*: cancel_minus($ARG1, $ARG2)
op_cancelPlus*: cancel_plus($ARG1, $ARG2)

# Set operations
op_intersection*: intersection($ARG1, $ARG2)
op_convexHull*: convex_hull($ARG1, $ARG2)

# Constructors
op_numsToInterval*: nums_to_interval($ARG1, $ARG2)
op_textToInterval*: text_to_interval($ARG1)
op_setDec*: set_dec($ARG1, $ARG2)
op_newDec*: new_dec($ARG1)

# Basic operations
op_pos*: |
    pos($ARG1)
    +$ARG1
op_neg*: |
    neg($ARG1)
    -$ARG1
op_add*: |
    add($ARG1, $ARG2)
    $ARG1 + $ARG2
op_sub*: |
    sub($ARG1, $ARG2)
    $ARG1 - $ARG2
op_mul*: |
    mul($ARG1, $ARG2)
    $ARG1 * $ARG2
op_div*: |
    div($ARG1, $ARG2)
    $ARG1 / $ARG2
op_recip*: recip($ARG1)
op_sqr*: sqr($ARG1)
op_sqrt*: sqrt($ARG1)
op_fma*: fma($ARG1, $ARG2, $ARG3)

# Power functions
op_pown*: pown($ARG1, $ARG2)
op_pow*: pow($ARG1, $ARG2)
op_exp*: exp($ARG1)
op_exp2*: exp2($ARG1)
op_exp10*: exp10($ARG1)
op_log*: log($ARG1)
op_log2*: log2($ARG1)
op_log10*: log10($ARG1)

# Trigonometric/hyperbolic functions
op_sin*: sin($ARG1)
op_cos*: cos($ARG1)
op_tan*: tan($ARG1)
op_asin*: asin($ARG1)
op_acos*: acos($ARG1)
op_atan*: atan($ARG1)
op_atan2*: atan2($ARG1, $ARG2)
op_sinh*: sinh($ARG1)
op_cosh*: cosh($ARG1)
op_tanh*: tanh($ARG1)
op_asinh*: asinh($ARG1)
op_acosh*: acosh($ARG1)
op_atanh*: atanh($ARG1)

# Integer functions
op_sign*: sign($ARG1)
op_ceil*: ceil($ARG1)
op_floor*: floor($ARG1)
op_trunc*: trunc($ARG1)
op_roundTiesToEven*: round_ties_to_even($ARG1)
op_roundTiesToAway*: round_ties_to_away($ARG1)

# Absmax functions
op_abs*: abs($ARG1)
op_min*: min($ARG1, $ARG2)
op_max*: max($ARG1, $ARG2)

# Numeric functions of intervals
op_inf*: inf($ARG1)
op_sup*: sup($ARG1)
op_mid*: mid($ARG1)
op_wid*: wid($ARG1)
op_rad*: rad($ARG1)
op_mag*: mag($ARG1)
op_mig*: mig($ARG1)

# Boolean functions of intervals
op_equal*: equal($ARG1, $ARG2)
op_subset*: subset($ARG1, $ARG2)
op_interior*: interior($ARG1, $ARG2)
op_disjoint*: disjoint($ARG1, $ARG2)
op_isEmpty*: is_empty($ARG1)
op_isEntire*: is_entire($ARG1)
op_isNaI*: is_nai($ARG1)
op_less*: less($ARG1, $ARG2)
op_strictLess*: strictly_less($ARG1, $ARG2)
op_precedes*: precedes($ARG1, $ARG2)
op_strictPrecedes*: strictly_precedes($ARG1, $ARG2)
op_isCommonInterval*: is_common_interval($ARG1)
op_isSingleton*: is_singleton($ARG1)
op_isMember*: is_member($ARG1, $ARG2)

# Extended interval comparison
op_overlap*: overlap($ARG1, $ARG2)

# Reverse-mode elementary functions
op_absRev*: abs_rev($ARG1)
op_absRevBin*: abs_rev($ARG1, $ARG2)
op_sqrRev*: sqr_rev($ARG1)
op_sqrRevBin*: sqr_rev($ARG1, $ARG2)
op_pownRev*: pown_rev($ARG1, $ARG2)
op_pownRevBin*: pown_rev($ARG1, $ARG2, $ARG3)
op_sinRev*: sin_rev($ARG1)
op_sinRevBin*: sin_rev($ARG1, $ARG2)
op_cosRev*: cos_rev($ARG1)
op_cosRevBin*: cos_rev($ARG1, $ARG2)
op_tanRev*: tan_rev($ARG1)
op_tanRevBin*: tan_rev($ARG1, $ARG2)
op_coshRev*: cosh_rev($ARG1)
op_coshRevBin*: cosh_rev($ARG1, $ARG2)
op_mulRev*: mul_rev($ARG1, $ARG2)
op_mulRevTen*: mul_rev($ARG1, $ARG2, $ARG3)
op_powRev1*: pow_rev1($ARG1, $ARG2, $ARG3)
op_powRev2*: pow_rev2($ARG1, $ARG2, $ARG3)
op_atan2Rev1*: atan2_rev1($ARG1, $ARG2, $ARG3)
op_atan2Rev2*: atan2_rev2($ARG1, $ARG2, $ARG3)

op_mulRevToPair*: |
    mul_rev_to_pair($ARG1, $ARG2).first
    *** next output
    mul_rev_to_pair($ARG1, $ARG2).second

op_overlap*: overlap($ARG1, $ARG2)
op_decorationPart*: decoration(${ARG1})

op_dot_down*: dot($ARG1, $ARG1 + $ARG1_LEN, $ARG2, p1788::reduction::rnd_mode::downward)
op_dot_up*: dot($ARG1, $ARG1 + $ARG1_LEN, $ARG2, p1788::reduction::rnd_mode::upward)
op_dot_zero*: dot($ARG1, $ARG1 + $ARG1_LEN, $ARG2, p1788::reduction::rnd_mode::to_zero)
op_dot_nearest*: dot($ARG1, $ARG1 + $ARG1_LEN, $ARG2, p1788::reduction::rnd_mode::to_nearest)

op_sum_down*: sum($ARG1, $ARG1 + $ARG1_LEN, $ARG2, p1788::reduction::rnd_mode::downward)
op_sum_up*: sum($ARG1, $ARG1 + $ARG1_LEN, $ARG2, p1788::reduction::rnd_mode::upward)
op_sum_zero*: sum($ARG1, $ARG1 + $ARG1_LEN, $ARG2, p1788::reduction::rnd_mode::to_zero)
op_sum_nearest*: sum($ARG1, $ARG1 + $ARG1_LEN, $ARG2, p1788::reduction::rnd_mode::to_nearest)

op_sum_abs_down*: sum_abs($ARG1, $ARG1 + $ARG1_LEN, $ARG2, p1788::reduction::rnd_mode::downward)
op_sum_abs_up*: sum_abs($ARG1, $ARG1 + $ARG1_LEN, $ARG2, p1788::reduction::rnd_mode::upward)
op_sum_abs_zero*: sum_abs($ARG1, $ARG1 + $ARG1_LEN, $ARG2, p1788::reduction::rnd_mode::to_zero)
op_sum_abs_nearest*: sum_abs($ARG1, $ARG1 + $ARG1_LEN, $ARG2, p1788::reduction::rnd_mode::to_nearest)

op_sum_sqr_down*: sum_sqr($ARG1, $ARG1 + $ARG1_LEN, $ARG2, p1788::reduction::rnd_mode::downward)
op_sum_sqr_up*: sum_sqr($ARG1, $ARG1 + $ARG1_LEN, $ARG2, p1788::reduction::rnd_mode::upward)
op_sum_sqr_zero*: sum_sqr($ARG1, $ARG1 + $ARG1_LEN, $ARG2, p1788::reduction::rnd_mode::to_zero)
op_sum_sqr_nearest*: sum_sqr($ARG1, $ARG1 + $ARG1_LEN, $ARG2, p1788::reduction::rnd_mode::to_nearest)

