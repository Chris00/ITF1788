#
#                              ITF1788
#
#   Interval Test Framework for IEEE 1788 Standard for Interval Arithmetic
#
#
#   Copyright 2015
#
#   Oliver Heimlich (oheim@posteo.de)
#
#   Department of Computer Science
#   University of Wuerzburg, Germany
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

imports: |
    import unittest
    import warnings
testfile_seq: |
    $COMMENTS
    $LANGUAGE_IMPORTS
    $TESTLIB_IMPORTS
    $ARITHLIB_IMPORTS
    $PREAMBLE
    warnings.simplefilter("always")
    class NotTightest(UserWarning):
        """Happens when a test does not produce the most accurate result"""

    suite = unittest.TestSuite()
    $TESTCASES

    if __name__ == '__main__':
        unittest.main()
# In case of empty test cases, because none of the functions is implemented,
# the class block may not be empty. Therefore we insert a documenting
# string inside the class block.
testcase_seq: |
    $COMMENTS
    class TestCase_$TC_NAME(unittest.TestCase):
        """$TC_NAME"""
    $TESTS
    suite.addTest(TestCase_$TC_NAME())
test_seq: |
    $COMMENTS
    def test_$COUNT(self):
    $ASSERTS
test_signal_seq: |
    $COMMENTS
    def test_$COUNT(self):
    $ASSERTS

assert_equals: "self.assertEqual($ARG1, $ARG2)"
# The last line of the warn statement is printed together with the
# warning message. We only need to output the part that contains
# the argument expressions and put this on the last line.
assert_equals_warning: |
    if not ($ARG1 == $ARG2):
        warnings.warn("%s != %s"%
            ($ARG1, $ARG2), NotTightest)
assert_true: "self.assertTrue($ARG1)"
