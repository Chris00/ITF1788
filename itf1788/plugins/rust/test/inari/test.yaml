#
#                              ITF1788
#
#   Interval Test Framework for IEEE 1788 Standard for Interval Arithmetic
#
#
#   Copyright 2014
#
#   Marco Nehmeier (nehmeier@informatik.uni-wuerzburg.de)
#   Maximilian Kiesner (maximilian.kiesner@stud-mail.uni-wuerzburg.de)
#
#   Department of Computer Science
#   University of Wuerzburg, Germany
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

#
# Imports specific to the test library.
# Write the imports the way you would write them in a source file of the target
# language.
# Example: "#include "test/util/boost_test_wrapper.hpp""
#
imports: |

#
# Define the structure of a test file.
# Use the token ${COMMENTS} for the copyright statement of the testcases and
# global file comments.
# Use the tokens ${LANGUAGE_IMPORTS}, ${TESTLIB_IMPORTS} and ${ARITHLIB_IMPORTS}
# where the respective imports shall be inserted. Use the ${PREAMBLE} token
# where constant definitions etc. shall be inserted.
# Use the token ${TESTCASES} where the testcases shall be inserted.
# Example: "
#           ${COMMENTS}
#           ${LANGUAGE_IMPORTS}
#           ${TESTLIB_IMPORTS}
#           ${ARITHLIB_IMPORTS}
#           ${PREAMBLE}
#           ${TESTCASES}
#          "
#
testfile_seq: |
  $COMMENTS
  $LANGUAGE_IMPORTS
  $TESTLIB_IMPORTS
  $ARITHLIB_IMPORTS
  $PREAMBLE
  $TESTCASES

#
# Define the structure of a test case.
# Use the token ${COMMENTS}, where the comments of the test case (if any)
# shall be inserted.
# Use the token ${TC_NAME} where the name of the test case shall be inserted.
# Use ${TESTS} where the sequence of tests in that testcase shall be inserted.
# Example: "
#           ${COMMENTS}
#           BOOST_AUTO_TESTCASE(${TC_NAME})
#           {
#           ${TESTS}
#           }
#          "
#
testcase_seq: |
  $COMMENTS
  #[test]
  fn $TC_NAME() {
  ${TESTS}
  }

#
# Define the structure of a test with no signaled exception.
# Use the token ${COMMENTS} where the comments of the test (if any) shall be
# inserted.
# Use the token ${ASSERTS} where the assert statements shall be inserted.
# Example: "
#           ${COMMENTS}
#           ${ASSERTS}
#          "
#
test_seq: |
  $COMMENTS
  $ASSERTS

#
# Define the structure of a test with subsequent checking whether an exception
# has been signaled.
# Use the token ${COMMENTS} where the comments of the test (if any) shall be
# inserted.
# Use the token ${ASSERTS} where the assert statements shall be inserted.
# Use the token ${EXCEPTION} where the signal's name shall be inserted.
# Example: "
#           ${COMMENTS}
#           ${ARITHLIB_CLEAR_EXCEPTIONS}
#           ${ASSERTS}
#           if not signal ${EXCEPTION} then fail
#          "
#
test_signal_seq: |
  $COMMENTS
  $ASSERTS

#
# Equality check of two values.
# Use the tokens ${ARG1} and ${ARG2} for the arguments.
# Example: "BOOST_CHECK_EQUAL(${ARG1}, ${ARG2})"
#
assert_equals: assert_eq2!($ARG1, $ARG2)

#
# Equality check of two values which, instead of aborting, merely genereates a
# warning.
# Use the tokens ${ARG1} and ${ARG2} for the arguments.
# Example: "BOOST_WARN_EQUAL(${ARG1}, ${ARG2})"
#
assert_equals_warning: assert_eq2!($ARG1, $ARG2)

#
# Checks if a value is the boolean true.
# Use ${ARG1} for the argument.
# Example: "BOOST_CHECK(${ARG1})"
#
assert_true: assert!($ARG1)
