/*
Copyright 2013 - 2015 Marco Nehmeier (nehmeier@informatik.uni-wuerzburg.de)
Copyright 2015 Oliver Heimlich (oheim@posteo.de)

Original author: Marco Nehmeier (unit tests in libieeep1788)
Converted into portable ITL format by Oliver Heimlich with minor corrections.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

testcase minimal_is_empty_test {
    is_empty [empty] = true;
    is_empty [-inf,+inf] = false;
    is_empty [1.0,2.0] = false;
    is_empty [-1.0,2.0] = false;
    is_empty [-3.0,-2.0] = false;
    is_empty [-inf,2.0] = false;
    is_empty [-inf,0.0] = false;
    is_empty [-inf,-0.0] = false;
    is_empty [0.0,inf] = false;
    is_empty [-0.0,inf] = false;
    is_empty [-0.0,0.0] = false;
    is_empty [0.0,-0.0] = false;
    is_empty [0.0,0.0] = false;
    is_empty [-0.0,-0.0] = false;
}

testcase minimal_is_empty_dec_test {
    is_empty [-inf,+inf]_def = false;
    is_empty [1.0,2.0]_com = false;
    is_empty [-1.0,2.0]_trv = false;
    is_empty [-3.0,-2.0]_dac = false;
    is_empty [-inf,2.0]_trv = false;
    is_empty [-inf,0.0]_trv = false;
    is_empty [-inf,-0.0]_trv = false;
    is_empty [0.0,inf]_def = false;
    is_empty [-0.0,inf]_trv = false;
    is_empty [-0.0,0.0]_com = false;
    is_empty [0.0,-0.0]_trv = false;
    is_empty [0.0,0.0]_trv = false;
    is_empty [-0.0,-0.0]_trv = false;
}

testcase minimal_is_entire_test {
    is_entire [empty] = false;
    is_entire [-inf,+inf] = true;
    is_entire [1.0,2.0] = false;
    is_entire [-1.0,2.0] = false;
    is_entire [-3.0,-2.0] = false;
    is_entire [-inf,2.0] = false;
    is_entire [-inf,0.0] = false;
    is_entire [-inf,-0.0] = false;
    is_entire [0.0,inf] = false;
    is_entire [-0.0,inf] = false;
    is_entire [-0.0,0.0] = false;
    is_entire [0.0,-0.0] = false;
    is_entire [0.0,0.0] = false;
    is_entire [-0.0,-0.0] = false;
}

testcase minimal_is_entire_dec_test {
    is_entire [empty] = false;
    is_entire [empty] = false;
    is_entire [-inf,+inf]_trv = true;
    is_entire [-inf,+inf]_def = true;
    is_entire [-inf,+inf]_dac = true;
    is_entire [1.0,2.0]_com = false;
    is_entire [-1.0,2.0]_trv = false;
    is_entire [-3.0,-2.0]_dac = false;
    is_entire [-inf,2.0]_trv = false;
    is_entire [-inf,0.0]_trv = false;
    is_entire [-inf,-0.0]_trv = false;
    is_entire [0.0,inf]_def = false;
    is_entire [-0.0,inf]_trv = false;
    is_entire [-0.0,0.0]_com = false;
    is_entire [0.0,-0.0]_trv = false;
    is_entire [0.0,0.0]_trv = false;
    is_entire [-0.0,-0.0]_trv = false;
}

testcase minimal_is_nai_dec_test {
    is_nai [-inf,+inf]_trv = false;
    is_nai [-inf,+inf]_def = false;
    is_nai [-inf,+inf]_dac = false;
    is_nai [1.0,2.0]_com = false;
    is_nai [-1.0,2.0]_trv = false;
    is_nai [-3.0,-2.0]_dac = false;
    is_nai [-inf,2.0]_trv = false;
    is_nai [-inf,0.0]_trv = false;
    is_nai [-inf,-0.0]_trv = false;
    is_nai [0.0,inf]_def = false;
    is_nai [-0.0,inf]_trv = false;
    is_nai [-0.0,0.0]_com = false;
    is_nai [0.0,-0.0]_trv = false;
    is_nai [0.0,0.0]_trv = false;
    is_nai [-0.0,-0.0]_trv = false;
}

testcase minimal_is_equal_test {
    is_equal [1.0,2.0] [1.0,2.0] = true;
    is_equal [1.0,2.1] [1.0,2.0] = false;
    is_equal [empty] [empty] = true;
    is_equal [empty] [1.0,2.0] = false;
    is_equal [-inf,+inf] [-inf,+inf] = true;
    is_equal [1.0,2.4] [-inf,+inf] = false;
    is_equal [1.0,inf] [1.0,inf] = true;
    is_equal [1.0,2.4] [1.0,inf] = false;
    is_equal [-inf,2.0] [-inf,2.0] = true;
    is_equal [-inf,2.4] [-inf,2.0] = false;
    is_equal [-2.0,0.0] [-2.0,0.0] = true;
    is_equal [-0.0,2.0] [0.0,2.0] = true;
    is_equal [-0.0,-0.0] [0.0,0.0] = true;
    is_equal [-0.0,0.0] [0.0,0.0] = true;
    is_equal [0.0,-0.0] [0.0,0.0] = true;
}

testcase minimal_is_equal_dec_test {
    is_equal [1.0,2.0]_def [1.0,2.0]_trv = true;
    is_equal [1.0,2.1]_trv [1.0,2.0]_trv = false;
    is_equal [empty] [empty] = true;
    is_equal [empty] [1.0,2.0]_trv = false;
    is_equal [empty] [1.0,2.0]_trv = false;
    is_equal [-inf,+inf]_def [-inf,+inf]_trv = true;
    is_equal [1.0,2.4]_trv [-inf,+inf]_trv = false;
    is_equal [1.0,inf]_trv [1.0,inf]_trv = true;
    is_equal [1.0,2.4]_def [1.0,inf]_trv = false;
    is_equal [-inf,2.0]_trv [-inf,2.0]_trv = true;
    is_equal [-inf,2.4]_def [-inf,2.0]_trv = false;
    is_equal [-2.0,0.0]_trv [-2.0,0.0]_trv = true;
    is_equal [-0.0,2.0]_def [0.0,2.0]_trv = true;
    is_equal [-0.0,-0.0]_trv [0.0,0.0]_trv = true;
    is_equal [-0.0,0.0]_def [0.0,0.0]_trv = true;
    is_equal [0.0,-0.0]_trv [0.0,0.0]_trv = true;
}

testcase minimal_subset_test {
    subset [empty] [empty] = true;
    subset [empty] [0.0,4.0] = true;
    subset [empty] [-0.0,4.0] = true;
    subset [empty] [-0.1,1.0] = true;
    subset [empty] [-0.1,0.0] = true;
    subset [empty] [-0.1,-0.0] = true;
    subset [empty] [-inf,+inf] = true;

    subset [0.0,4.0] [empty] = false;
    subset [-0.0,4.0] [empty] = false;
    subset [-0.1,1.0] [empty] = false;
    subset [-inf,+inf] [empty] = false;

    subset [0.0,4.0] [-inf,+inf] = true;
    subset [-0.0,4.0] [-inf,+inf] = true;
    subset [-0.1,1.0] [-inf,+inf] = true;
    subset [-inf,+inf] [-inf,+inf] = true;

    subset [1.0,2.0] [1.0,2.0] = true;
    subset [1.0,2.0] [0.0,4.0] = true;
    subset [1.0,2.0] [-0.0,4.0] = true;
    subset [0.1,0.2] [0.0,4.0] = true;
    subset [0.1,0.2] [-0.0,4.0] = true;
    subset [-0.1,-0.1] [-4.0, 3.4] = true;

    subset [0.0,0.0] [-0.0,-0.0] = true;
    subset [-0.0,-0.0] [0.0,0.0] = true;
    subset [-0.0,0.0] [0.0,0.0] = true;
    subset [-0.0,0.0] [0.0,-0.0] = true;
    subset [0.0,-0.0] [0.0,0.0] = true;
    subset [0.0,-0.0] [-0.0,0.0] = true;
}

testcase minimal_subset_dec_test {
    subset [empty] [0.0,4.0]_trv = true;
    subset [empty] [-0.0,4.0]_def = true;
    subset [empty] [-0.1,1.0]_trv = true;
    subset [empty] [-0.1,0.0]_trv = true;
    subset [empty] [-0.1,-0.0]_trv = true;
    subset [empty] [-inf,+inf]_trv = true;

    subset [0.0,4.0]_trv [empty] = false;
    subset [-0.0,4.0]_def [empty] = false;
    subset [-0.1,1.0]_trv [empty] = false;
    subset [-inf,+inf]_trv [empty] = false;

    subset [0.0,4.0]_trv [-inf,+inf]_trv = true;
    subset [-0.0,4.0]_trv [-inf,+inf]_trv = true;
    subset [-0.1,1.0]_trv [-inf,+inf]_trv = true;
    subset [-inf,+inf]_trv [-inf,+inf]_trv = true;

    subset [1.0,2.0]_trv [1.0,2.0]_trv = true;
    subset [1.0,2.0]_trv [0.0,4.0]_trv = true;
    subset [1.0,2.0]_def [-0.0,4.0]_def = true;
    subset [0.1,0.2]_trv [0.0,4.0]_trv = true;
    subset [0.1,0.2]_trv [-0.0,4.0]_def = true;
    subset [-0.1,-0.1]_trv [-4.0, 3.4]_trv = true;

    subset [0.0,0.0]_trv [-0.0,-0.0]_trv = true;
    subset [-0.0,-0.0]_trv [0.0,0.0]_def = true;
    subset [-0.0,0.0]_trv [0.0,0.0]_trv = true;
    subset [-0.0,0.0]_trv [0.0,-0.0]_trv = true;
    subset [0.0,-0.0]_def [0.0,0.0]_trv = true;
    subset [0.0,-0.0]_trv [-0.0,0.0]_trv = true;
}

testcase minimal_less_test {
    less [empty] [empty] = true;
    less [1.0,2.0] [empty] = false;
    less [empty] [1.0,2.0] = false;

    less [-inf,+inf] [-inf,+inf] = true;
    less [1.0,2.0] [-inf,+inf] = false;
    less [0.0,2.0] [-inf,+inf] = false;
    less [-0.0,2.0] [-inf,+inf] = false;
    less [-inf,+inf] [1.0,2.0] = false;
    less [-inf,+inf] [0.0,2.0] = false;
    less [-inf,+inf] [-0.0,2.0] = false;

    less [0.0,2.0] [0.0,2.0] = true;
    less [0.0,2.0] [-0.0,2.0] = true;
    less [0.0,2.0] [1.0,2.0] = true;
    less [-0.0,2.0] [1.0,2.0] = true;
    less [1.0,2.0] [1.0,2.0] = true;
    less [1.0,2.0] [3.0,4.0] = true;
    less [1.0,3.5] [3.0,4.0] = true;
    less [1.0,4.0] [3.0,4.0] = true;

    less [-2.0,-1.0] [-2.0,-1.0] = true;
    less [-3.0,-1.5] [-2.0,-1.0] = true;

    less [0.0,0.0] [-0.0,-0.0] = true;
    less [-0.0,-0.0] [0.0,0.0] = true;
    less [-0.0,0.0] [0.0,0.0] = true;
    less [-0.0,0.0] [0.0,-0.0] = true;
    less [0.0,-0.0] [0.0,0.0] = true;
    less [0.0,-0.0] [-0.0,0.0] = true;
}

testcase minimal_less_dec_test {
    less [1.0,2.0]_trv [empty] = false;
    less [empty] [1.0,2.0]_def = false;

    less [1.0,2.0]_trv [empty] = false;
    less [empty] [1.0,2.0]_trv = false;

    less [-inf,+inf]_trv [-inf,+inf]_trv = true;
    less [1.0,2.0]_def [-inf,+inf]_trv = false;
    less [0.0,2.0]_trv [-inf,+inf]_trv = false;
    less [-0.0,2.0]_trv [-inf,+inf]_trv = false;
    less [-inf,+inf]_trv [1.0,2.0]_trv = false;
    less [-inf,+inf]_trv [0.0,2.0]_def = false;
    less [-inf,+inf]_trv [-0.0,2.0]_trv = false;

    less [0.0,2.0]_trv [0.0,2.0]_trv = true;
    less [0.0,2.0]_trv [-0.0,2.0]_trv = true;
    less [0.0,2.0]_def [1.0,2.0]_def = true;
    less [-0.0,2.0]_trv [1.0,2.0]_trv = true;
    less [1.0,2.0]_trv [1.0,2.0]_trv = true;
    less [1.0,2.0]_trv [3.0,4.0]_def = true;
    less [1.0,3.5]_trv [3.0,4.0]_trv = true;
    less [1.0,4.0]_trv [3.0,4.0]_trv = true;

    less [-2.0,-1.0]_trv [-2.0,-1.0]_trv = true;
    less [-3.0,-1.5]_trv [-2.0,-1.0]_trv = true;

    less [0.0,0.0]_trv [-0.0,-0.0]_trv = true;
    less [-0.0,-0.0]_trv [0.0,0.0]_def = true;
    less [-0.0,0.0]_trv [0.0,0.0]_trv = true;
    less [-0.0,0.0]_trv [0.0,-0.0]_trv = true;
    less [0.0,-0.0]_def [0.0,0.0]_trv = true;
    less [0.0,-0.0]_trv [-0.0,0.0]_trv = true;
}

testcase minimal_precedes_test {
    precedes [empty] [3.0,4.0] = true;
    precedes [3.0,4.0] [empty] = true;
    precedes [empty] [empty] = true;


    precedes [1.0,2.0] [-inf,+inf] = false;
    precedes [0.0,2.0] [-inf,+inf] = false;
    precedes [-0.0,2.0] [-inf,+inf] = false;
    precedes [-inf,+inf] [1.0,2.0] = false;
    precedes [-inf,+inf] [-inf,+inf] = false;

    precedes [1.0,2.0] [3.0,4.0] = true;
    precedes [1.0,3.0] [3.0,4.0] = true;
    precedes [-3.0, -1.0] [-1.0,0.0] = true;
    precedes [-3.0, -1.0] [-1.0,-0.0] = true;

    precedes [1.0,3.5] [3.0,4.0] = false;
    precedes [1.0,4.0] [3.0,4.0] = false;
    precedes [-3.0, -0.1] [-1.0,0.0] = false;

    precedes [0.0,0.0] [-0.0,-0.0] = true;
    precedes [-0.0,-0.0] [0.0,0.0] = true;
    precedes [-0.0,0.0] [0.0,0.0] = true;
    precedes [-0.0,0.0] [0.0,-0.0] = true;
    precedes [0.0,-0.0] [0.0,0.0] = true;
    precedes [0.0,-0.0] [-0.0,0.0] = true;
}

testcase minimal_precedes_dec_test {
    precedes [empty] [3.0,4.0]_def = true;
    precedes [3.0,4.0]_trv [empty] = true;

    precedes [empty] [3.0,4.0]_trv = true;
    precedes [3.0,4.0]_trv [empty] = true;


    precedes [1.0,2.0]_trv [-inf,+inf]_trv = false;
    precedes [0.0,2.0]_trv [-inf,+inf]_trv = false;
    precedes [-0.0,2.0]_trv [-inf,+inf]_trv = false;
    precedes [-inf,+inf]_trv [1.0,2.0]_trv = false;
    precedes [-inf,+inf]_trv [-inf,+inf]_trv = false;

    precedes [1.0,2.0]_trv [3.0,4.0]_trv = true;
    precedes [1.0,3.0]_trv [3.0,4.0]_def = true;
    precedes [-3.0, -1.0]_def [-1.0,0.0]_trv = true;
    precedes [-3.0, -1.0]_trv [-1.0,-0.0]_trv = true;

    precedes [1.0,3.5]_trv [3.0,4.0]_trv = false;
    precedes [1.0,4.0]_trv [3.0,4.0]_trv = false;
    precedes [-3.0, -0.1]_trv [-1.0,0.0]_trv = false;

    precedes [0.0,0.0]_trv [-0.0,-0.0]_trv = true;
    precedes [-0.0,-0.0]_trv [0.0,0.0]_def = true;
    precedes [-0.0,0.0]_trv [0.0,0.0]_trv = true;
    precedes [-0.0,0.0]_def [0.0,-0.0]_trv = true;
    precedes [0.0,-0.0]_trv [0.0,0.0]_trv = true;
    precedes [0.0,-0.0]_trv [-0.0,0.0]_trv = true;
}

testcase minimal_is_interior_test {
    is_interior [empty] [empty] = true;
    is_interior [empty] [0.0,4.0] = true;
    is_interior [0.0,4.0] [empty] = false;

    is_interior [-inf,+inf] [-inf,+inf] = true;
    is_interior [0.0,4.0] [-inf,+inf] = true;
    is_interior [empty] [-inf,+inf] = true;
    is_interior [-inf,+inf] [0.0,4.0] = false;

    is_interior [0.0,4.0] [0.0,4.0] = false;
    is_interior [1.0,2.0] [0.0,4.0] = true;
    is_interior [-2.0,2.0] [-2.0,4.0] = false;
    is_interior [-0.0,-0.0] [-2.0,4.0] = true;
    is_interior [0.0,0.0] [-2.0,4.0] = true;
    is_interior [0.0,0.0] [-0.0,-0.0] = false;

    is_interior [0.0,4.4] [0.0,4.0] = false;
    is_interior [-1.0,-1.0] [0.0,4.0] = false;
    is_interior [2.0,2.0] [-2.0,-1.0] = false;
}

testcase minimal_is_interior_dec_test {
    is_interior [empty] [0.0,4.0]_trv = true;
    is_interior [0.0,4.0]_def [empty] = false;

    is_interior [0.0,4.0]_trv [empty] = false;

    is_interior [-inf,+inf]_trv [-inf,+inf]_trv = true;
    is_interior [0.0,4.0]_trv [-inf,+inf]_trv = true;
    is_interior [empty] [-inf,+inf]_trv = true;
    is_interior [-inf,+inf]_trv [0.0,4.0]_trv = false;

    is_interior [0.0,4.0]_trv [0.0,4.0]_trv = false;
    is_interior [1.0,2.0]_def [0.0,4.0]_trv = true;
    is_interior [-2.0,2.0]_trv [-2.0,4.0]_def = false;
    is_interior [-0.0,-0.0]_trv [-2.0,4.0]_trv = true;
    is_interior [0.0,0.0]_def [-2.0,4.0]_trv = true;
    is_interior [0.0,0.0]_trv [-0.0,-0.0]_trv = false;

    is_interior [0.0,4.4]_trv [0.0,4.0]_trv = false;
    is_interior [-1.0,-1.0]_trv [0.0,4.0]_def = false;
    is_interior [2.0,2.0]_def [-2.0,-1.0]_trv = false;
}

testcase minimal_strictly_less_test {
    strictly_less [empty] [empty] = true;
    strictly_less [1.0,2.0] [empty] = false;
    strictly_less [empty] [1.0,2.0] = false;

    strictly_less [-inf,+inf] [-inf,+inf] = true;
    strictly_less [1.0,2.0] [-inf,+inf] = false;
    strictly_less [-inf,+inf] [1.0,2.0] = false;

    strictly_less [1.0,2.0] [1.0,2.0] = false;
    strictly_less [1.0,2.0] [3.0,4.0] = true;
    strictly_less [1.0,3.5] [3.0,4.0] = true;
    strictly_less [1.0,4.0] [3.0,4.0] = false;
    strictly_less [0.0,4.0] [0.0,4.0] = false;
    strictly_less [-0.0,4.0] [0.0,4.0] = false;

    strictly_less [-2.0,-1.0] [-2.0,-1.0] = false;
    strictly_less [-3.0,-1.5] [-2.0,-1.0] = true;
}

testcase minimal_strictly_less_dec_test {
    strictly_less [1.0,2.0]_trv [empty] = false;
    strictly_less [empty] [1.0,2.0]_def = false;

    strictly_less [1.0,2.0]_def [empty] = false;
    strictly_less [empty] [1.0,2.0]_def = false;

    strictly_less [-inf,+inf]_trv [-inf,+inf]_trv = true;
    strictly_less [1.0,2.0]_trv [-inf,+inf]_trv = false;
    strictly_less [-inf,+inf]_trv [1.0,2.0]_trv = false;

    strictly_less [1.0,2.0]_trv [1.0,2.0]_trv = false;
    strictly_less [1.0,2.0]_trv [3.0,4.0]_trv = true;
    strictly_less [1.0,3.5]_def [3.0,4.0]_trv = true;
    strictly_less [1.0,4.0]_trv [3.0,4.0]_def = false;
    strictly_less [0.0,4.0]_trv [0.0,4.0]_def = false;
    strictly_less [-0.0,4.0]_def [0.0,4.0]_trv = false;

    strictly_less [-2.0,-1.0]_def [-2.0,-1.0]_def = false;
    strictly_less [-3.0,-1.5]_trv [-2.0,-1.0]_trv = true;
}

testcase minimal_strictly_precedes_test {
    strictly_precedes [empty] [3.0,4.0] = true;
    strictly_precedes [3.0,4.0] [empty] = true;
    strictly_precedes [empty] [empty] = true;


    strictly_precedes [1.0,2.0] [-inf,+inf] = false;
    strictly_precedes [-inf,+inf] [1.0,2.0] = false;
    strictly_precedes [-inf,+inf] [-inf,+inf] = false;

    strictly_precedes [1.0,2.0] [3.0,4.0] = true;
    strictly_precedes [1.0,3.0] [3.0,4.0] = false;
    strictly_precedes [-3.0, -1.0] [-1.0,0.0] = false;
    strictly_precedes [-3.0, -0.0] [0.0,1.0] = false;
    strictly_precedes [-3.0, 0.0] [-0.0,1.0] = false;

    strictly_precedes [1.0,3.5] [3.0,4.0] = false;
    strictly_precedes [1.0,4.0] [3.0,4.0] = false;
    strictly_precedes [-3.0, -0.1] [-1.0,0.0] = false;
}

testcase minimal_strictly_precedes_dec_test {
    strictly_precedes [empty] [3.0,4.0]_trv = true;
    strictly_precedes [3.0,4.0]_def [empty] = true;

    strictly_precedes [empty] [3.0,4.0]_trv = true;
    strictly_precedes [3.0,4.0]_def [empty] = true;

    strictly_precedes [1.0,2.0]_trv [-inf,+inf]_trv = false;
    strictly_precedes [-inf,+inf]_trv [1.0,2.0]_trv = false;
    strictly_precedes [-inf,+inf]_trv [-inf,+inf]_trv = false;

    strictly_precedes [1.0,2.0]_trv [3.0,4.0]_trv = true;
    strictly_precedes [1.0,3.0]_def [3.0,4.0]_trv = false;
    strictly_precedes [-3.0, -1.0]_trv [-1.0,0.0]_def = false;
    strictly_precedes [-3.0, -0.0]_def [0.0,1.0]_trv = false;
    strictly_precedes [-3.0, 0.0]_trv [-0.0,1.0]_trv = false;

    strictly_precedes [1.0,3.5]_trv [3.0,4.0]_trv = false;
    strictly_precedes [1.0,4.0]_trv [3.0,4.0]_def = false;
    strictly_precedes [-3.0, -0.1]_trv [-1.0,0.0]_trv = false;
}

testcase minimal_are_disjoint_test {
    are_disjoint [empty] [3.0,4.0] = true;
    are_disjoint [3.0,4.0] [empty] = true;
    are_disjoint [empty] [empty] = true;

    are_disjoint [3.0,4.0] [1.0,2.0] = true;

    are_disjoint [0.0,0.0] [-0.0,-0.0] = false;
    are_disjoint [0.0,-0.0] [-0.0,0.0] = false;
    are_disjoint [3.0,4.0] [1.0,7.0] = false;
    are_disjoint [3.0,4.0] [-inf,+inf] = false;
    are_disjoint [-inf,+inf] [1.0,7.0] = false;
    are_disjoint [-inf,+inf] [-inf,+inf] = false;
}

testcase minimal_are_disjoint_dec_test {
    are_disjoint [empty] [3.0,4.0]_def = true;
    are_disjoint [3.0,4.0]_trv [empty] = true;

    are_disjoint [empty] [3.0,4.0]_trv = true;
    are_disjoint [3.0,4.0]_trv [empty] = true;

    are_disjoint [3.0,4.0]_trv [1.0,2.0]_def = true;

    are_disjoint [0.0,0.0]_trv [-0.0,-0.0]_trv = false;
    are_disjoint [0.0,-0.0]_trv [-0.0,0.0]_trv = false;
    are_disjoint [3.0,4.0]_def [1.0,7.0]_def = false;
    are_disjoint [3.0,4.0]_trv [-inf,+inf]_trv = false;
    are_disjoint [-inf,+inf]_trv [1.0,7.0]_trv = false;
    are_disjoint [-inf,+inf]_trv [-inf,+inf]_trv = false;
}
