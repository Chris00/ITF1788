/*
Copyright 2013 - 2015 Marco Nehmeier (nehmeier@informatik.uni-wuerzburg.de)
Copyright 2015 Oliver Heimlich (oheim@posteo.de)

Original author: Marco Nehmeier (unit tests in libieeep1788)
Converted into portable ITL format by Oliver Heimlich with minor corrections.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

testcase minimal_empty_test {
    isEmpty [empty] = true;
    isEmpty [-inf,+inf] = false;
    isEmpty [1.0,2.0] = false;
    isEmpty [-1.0,2.0] = false;
    isEmpty [-3.0,-2.0] = false;
    isEmpty [-inf,2.0] = false;
    isEmpty [-inf,0.0] = false;
    isEmpty [-inf,-0.0] = false;
    isEmpty [0.0,inf] = false;
    isEmpty [-0.0,inf] = false;
    isEmpty [-0.0,0.0] = false;
    isEmpty [0.0,-0.0] = false;
    isEmpty [0.0,0.0] = false;
    isEmpty [-0.0,-0.0] = false;
}

testcase minimal_empty_dec_test {
    isEmpty [-inf,+inf]_def = false;
    isEmpty [1.0,2.0]_com = false;
    isEmpty [-1.0,2.0]_trv = false;
    isEmpty [-3.0,-2.0]_dac = false;
    isEmpty [-inf,2.0]_trv = false;
    isEmpty [-inf,0.0]_trv = false;
    isEmpty [-inf,-0.0]_trv = false;
    isEmpty [0.0,inf]_def = false;
    isEmpty [-0.0,inf]_trv = false;
    isEmpty [-0.0,0.0]_com = false;
    isEmpty [0.0,-0.0]_trv = false;
    isEmpty [0.0,0.0]_trv = false;
    isEmpty [-0.0,-0.0]_trv = false;
}

testcase minimal_entire_test {
    isEntire [empty] = false;
    isEntire [-inf,+inf] = true;
    isEntire [1.0,2.0] = false;
    isEntire [-1.0,2.0] = false;
    isEntire [-3.0,-2.0] = false;
    isEntire [-inf,2.0] = false;
    isEntire [-inf,0.0] = false;
    isEntire [-inf,-0.0] = false;
    isEntire [0.0,inf] = false;
    isEntire [-0.0,inf] = false;
    isEntire [-0.0,0.0] = false;
    isEntire [0.0,-0.0] = false;
    isEntire [0.0,0.0] = false;
    isEntire [-0.0,-0.0] = false;
}

testcase minimal_entire_dec_test {
    isEntire [empty] = false;
    isEntire [empty] = false;
    isEntire [-inf,+inf]_trv = true;
    isEntire [-inf,+inf]_def = true;
    isEntire [-inf,+inf]_dac = true;
    isEntire [1.0,2.0]_com = false;
    isEntire [-1.0,2.0]_trv = false;
    isEntire [-3.0,-2.0]_dac = false;
    isEntire [-inf,2.0]_trv = false;
    isEntire [-inf,0.0]_trv = false;
    isEntire [-inf,-0.0]_trv = false;
    isEntire [0.0,inf]_def = false;
    isEntire [-0.0,inf]_trv = false;
    isEntire [-0.0,0.0]_com = false;
    isEntire [0.0,-0.0]_trv = false;
    isEntire [0.0,0.0]_trv = false;
    isEntire [-0.0,-0.0]_trv = false;
}

testcase minimal_nai_dec_test {
    isNaI [-inf,+inf]_trv = false;
    isNaI [-inf,+inf]_def = false;
    isNaI [-inf,+inf]_dac = false;
    isNaI [1.0,2.0]_com = false;
    isNaI [-1.0,2.0]_trv = false;
    isNaI [-3.0,-2.0]_dac = false;
    isNaI [-inf,2.0]_trv = false;
    isNaI [-inf,0.0]_trv = false;
    isNaI [-inf,-0.0]_trv = false;
    isNaI [0.0,inf]_def = false;
    isNaI [-0.0,inf]_trv = false;
    isNaI [-0.0,0.0]_com = false;
    isNaI [0.0,-0.0]_trv = false;
    isNaI [0.0,0.0]_trv = false;
    isNaI [-0.0,-0.0]_trv = false;
}

testcase minimal_isEqual_test {
    isEqual [1.0,2.0] [1.0,2.0] = true;
    isEqual [1.0,2.1] [1.0,2.0] = false;
    isEqual [empty] [empty] = true;
    isEqual [empty] [1.0,2.0] = false;
    isEqual [-inf,+inf] [-inf,+inf] = true;
    isEqual [1.0,2.4] [-inf,+inf] = false;
    isEqual [1.0,inf] [1.0,inf] = true;
    isEqual [1.0,2.4] [1.0,inf] = false;
    isEqual [-inf,2.0] [-inf,2.0] = true;
    isEqual [-inf,2.4] [-inf,2.0] = false;
    isEqual [-2.0,0.0] [-2.0,0.0] = true;
    isEqual [-0.0,2.0] [0.0,2.0] = true;
    isEqual [-0.0,-0.0] [0.0,0.0] = true;
    isEqual [-0.0,0.0] [0.0,0.0] = true;
    isEqual [0.0,-0.0] [0.0,0.0] = true;
}

testcase minimal_isEqual_dec_test {
    isEqual [1.0,2.0]_def [1.0,2.0]_trv = true;
    isEqual [1.0,2.1]_trv [1.0,2.0]_trv = false;
    isEqual [empty] [empty] = true;
    isEqual [empty] [1.0,2.0]_trv = false;
    isEqual [empty] [1.0,2.0]_trv = false;
    isEqual [-inf,+inf]_def [-inf,+inf]_trv = true;
    isEqual [1.0,2.4]_trv [-inf,+inf]_trv = false;
    isEqual [1.0,inf]_trv [1.0,inf]_trv = true;
    isEqual [1.0,2.4]_def [1.0,inf]_trv = false;
    isEqual [-inf,2.0]_trv [-inf,2.0]_trv = true;
    isEqual [-inf,2.4]_def [-inf,2.0]_trv = false;
    isEqual [-2.0,0.0]_trv [-2.0,0.0]_trv = true;
    isEqual [-0.0,2.0]_def [0.0,2.0]_trv = true;
    isEqual [-0.0,-0.0]_trv [0.0,0.0]_trv = true;
    isEqual [-0.0,0.0]_def [0.0,0.0]_trv = true;
    isEqual [0.0,-0.0]_trv [0.0,0.0]_trv = true;
}

testcase minimal_subset_test {
    subset [empty] [empty] = true;
    subset [empty] [0.0,4.0] = true;
    subset [empty] [-0.0,4.0] = true;
    subset [empty] [-0.1,1.0] = true;
    subset [empty] [-0.1,0.0] = true;
    subset [empty] [-0.1,-0.0] = true;
    subset [empty] [-inf,+inf] = true;

    subset [0.0,4.0] [empty] = false;
    subset [-0.0,4.0] [empty] = false;
    subset [-0.1,1.0] [empty] = false;
    subset [-inf,+inf] [empty] = false;

    subset [0.0,4.0] [-inf,+inf] = true;
    subset [-0.0,4.0] [-inf,+inf] = true;
    subset [-0.1,1.0] [-inf,+inf] = true;
    subset [-inf,+inf] [-inf,+inf] = true;

    subset [1.0,2.0] [1.0,2.0] = true;
    subset [1.0,2.0] [0.0,4.0] = true;
    subset [1.0,2.0] [-0.0,4.0] = true;
    subset [0.1,0.2] [0.0,4.0] = true;
    subset [0.1,0.2] [-0.0,4.0] = true;
    subset [-0.1,-0.1] [-4.0, 3.4] = true;

    subset [0.0,0.0] [-0.0,-0.0] = true;
    subset [-0.0,-0.0] [0.0,0.0] = true;
    subset [-0.0,0.0] [0.0,0.0] = true;
    subset [-0.0,0.0] [0.0,-0.0] = true;
    subset [0.0,-0.0] [0.0,0.0] = true;
    subset [0.0,-0.0] [-0.0,0.0] = true;
}

testcase minimal_subset_dec_test {
    subset [empty] [0.0,4.0]_trv = true;
    subset [empty] [-0.0,4.0]_def = true;
    subset [empty] [-0.1,1.0]_trv = true;
    subset [empty] [-0.1,0.0]_trv = true;
    subset [empty] [-0.1,-0.0]_trv = true;
    subset [empty] [-inf,+inf]_trv = true;

    subset [0.0,4.0]_trv [empty] = false;
    subset [-0.0,4.0]_def [empty] = false;
    subset [-0.1,1.0]_trv [empty] = false;
    subset [-inf,+inf]_trv [empty] = false;

    subset [0.0,4.0]_trv [-inf,+inf]_trv = true;
    subset [-0.0,4.0]_trv [-inf,+inf]_trv = true;
    subset [-0.1,1.0]_trv [-inf,+inf]_trv = true;
    subset [-inf,+inf]_trv [-inf,+inf]_trv = true;

    subset [1.0,2.0]_trv [1.0,2.0]_trv = true;
    subset [1.0,2.0]_trv [0.0,4.0]_trv = true;
    subset [1.0,2.0]_def [-0.0,4.0]_def = true;
    subset [0.1,0.2]_trv [0.0,4.0]_trv = true;
    subset [0.1,0.2]_trv [-0.0,4.0]_def = true;
    subset [-0.1,-0.1]_trv [-4.0, 3.4]_trv = true;

    subset [0.0,0.0]_trv [-0.0,-0.0]_trv = true;
    subset [-0.0,-0.0]_trv [0.0,0.0]_def = true;
    subset [-0.0,0.0]_trv [0.0,0.0]_trv = true;
    subset [-0.0,0.0]_trv [0.0,-0.0]_trv = true;
    subset [0.0,-0.0]_def [0.0,0.0]_trv = true;
    subset [0.0,-0.0]_trv [-0.0,0.0]_trv = true;
}

testcase minimal_less_test {
    less [empty] [empty] = true;
    less [1.0,2.0] [empty] = false;
    less [empty] [1.0,2.0] = false;

    less [-inf,+inf] [-inf,+inf] = true;
    less [1.0,2.0] [-inf,+inf] = false;
    less [0.0,2.0] [-inf,+inf] = false;
    less [-0.0,2.0] [-inf,+inf] = false;
    less [-inf,+inf] [1.0,2.0] = false;
    less [-inf,+inf] [0.0,2.0] = false;
    less [-inf,+inf] [-0.0,2.0] = false;

    less [0.0,2.0] [0.0,2.0] = true;
    less [0.0,2.0] [-0.0,2.0] = true;
    less [0.0,2.0] [1.0,2.0] = true;
    less [-0.0,2.0] [1.0,2.0] = true;
    less [1.0,2.0] [1.0,2.0] = true;
    less [1.0,2.0] [3.0,4.0] = true;
    less [1.0,3.5] [3.0,4.0] = true;
    less [1.0,4.0] [3.0,4.0] = true;

    less [-2.0,-1.0] [-2.0,-1.0] = true;
    less [-3.0,-1.5] [-2.0,-1.0] = true;

    less [0.0,0.0] [-0.0,-0.0] = true;
    less [-0.0,-0.0] [0.0,0.0] = true;
    less [-0.0,0.0] [0.0,0.0] = true;
    less [-0.0,0.0] [0.0,-0.0] = true;
    less [0.0,-0.0] [0.0,0.0] = true;
    less [0.0,-0.0] [-0.0,0.0] = true;
}

testcase minimal_less_dec_test {
    less [1.0,2.0]_trv [empty] = false;
    less [empty] [1.0,2.0]_def = false;

    less [1.0,2.0]_trv [empty] = false;
    less [empty] [1.0,2.0]_trv = false;

    less [-inf,+inf]_trv [-inf,+inf]_trv = true;
    less [1.0,2.0]_def [-inf,+inf]_trv = false;
    less [0.0,2.0]_trv [-inf,+inf]_trv = false;
    less [-0.0,2.0]_trv [-inf,+inf]_trv = false;
    less [-inf,+inf]_trv [1.0,2.0]_trv = false;
    less [-inf,+inf]_trv [0.0,2.0]_def = false;
    less [-inf,+inf]_trv [-0.0,2.0]_trv = false;

    less [0.0,2.0]_trv [0.0,2.0]_trv = true;
    less [0.0,2.0]_trv [-0.0,2.0]_trv = true;
    less [0.0,2.0]_def [1.0,2.0]_def = true;
    less [-0.0,2.0]_trv [1.0,2.0]_trv = true;
    less [1.0,2.0]_trv [1.0,2.0]_trv = true;
    less [1.0,2.0]_trv [3.0,4.0]_def = true;
    less [1.0,3.5]_trv [3.0,4.0]_trv = true;
    less [1.0,4.0]_trv [3.0,4.0]_trv = true;

    less [-2.0,-1.0]_trv [-2.0,-1.0]_trv = true;
    less [-3.0,-1.5]_trv [-2.0,-1.0]_trv = true;

    less [0.0,0.0]_trv [-0.0,-0.0]_trv = true;
    less [-0.0,-0.0]_trv [0.0,0.0]_def = true;
    less [-0.0,0.0]_trv [0.0,0.0]_trv = true;
    less [-0.0,0.0]_trv [0.0,-0.0]_trv = true;
    less [0.0,-0.0]_def [0.0,0.0]_trv = true;
    less [0.0,-0.0]_trv [-0.0,0.0]_trv = true;
}

testcase minimal_precedes_test {
    precedes [empty] [3.0,4.0] = true;
    precedes [3.0,4.0] [empty] = true;
    precedes [empty] [empty] = true;


    precedes [1.0,2.0] [-inf,+inf] = false;
    precedes [0.0,2.0] [-inf,+inf] = false;
    precedes [-0.0,2.0] [-inf,+inf] = false;
    precedes [-inf,+inf] [1.0,2.0] = false;
    precedes [-inf,+inf] [-inf,+inf] = false;

    precedes [1.0,2.0] [3.0,4.0] = true;
    precedes [1.0,3.0] [3.0,4.0] = true;
    precedes [-3.0, -1.0] [-1.0,0.0] = true;
    precedes [-3.0, -1.0] [-1.0,-0.0] = true;

    precedes [1.0,3.5] [3.0,4.0] = false;
    precedes [1.0,4.0] [3.0,4.0] = false;
    precedes [-3.0, -0.1] [-1.0,0.0] = false;

    precedes [0.0,0.0] [-0.0,-0.0] = true;
    precedes [-0.0,-0.0] [0.0,0.0] = true;
    precedes [-0.0,0.0] [0.0,0.0] = true;
    precedes [-0.0,0.0] [0.0,-0.0] = true;
    precedes [0.0,-0.0] [0.0,0.0] = true;
    precedes [0.0,-0.0] [-0.0,0.0] = true;
}

testcase minimal_precedes_dec_test {
    precedes [empty] [3.0,4.0]_def = true;
    precedes [3.0,4.0]_trv [empty] = true;

    precedes [empty] [3.0,4.0]_trv = true;
    precedes [3.0,4.0]_trv [empty] = true;


    precedes [1.0,2.0]_trv [-inf,+inf]_trv = false;
    precedes [0.0,2.0]_trv [-inf,+inf]_trv = false;
    precedes [-0.0,2.0]_trv [-inf,+inf]_trv = false;
    precedes [-inf,+inf]_trv [1.0,2.0]_trv = false;
    precedes [-inf,+inf]_trv [-inf,+inf]_trv = false;

    precedes [1.0,2.0]_trv [3.0,4.0]_trv = true;
    precedes [1.0,3.0]_trv [3.0,4.0]_def = true;
    precedes [-3.0, -1.0]_def [-1.0,0.0]_trv = true;
    precedes [-3.0, -1.0]_trv [-1.0,-0.0]_trv = true;

    precedes [1.0,3.5]_trv [3.0,4.0]_trv = false;
    precedes [1.0,4.0]_trv [3.0,4.0]_trv = false;
    precedes [-3.0, -0.1]_trv [-1.0,0.0]_trv = false;

    precedes [0.0,0.0]_trv [-0.0,-0.0]_trv = true;
    precedes [-0.0,-0.0]_trv [0.0,0.0]_def = true;
    precedes [-0.0,0.0]_trv [0.0,0.0]_trv = true;
    precedes [-0.0,0.0]_def [0.0,-0.0]_trv = true;
    precedes [0.0,-0.0]_trv [0.0,0.0]_trv = true;
    precedes [0.0,-0.0]_trv [-0.0,0.0]_trv = true;
}

testcase minimal_interior_test {
    interior [empty] [empty] = true;
    interior [empty] [0.0,4.0] = true;
    interior [0.0,4.0] [empty] = false;

    interior [-inf,+inf] [-inf,+inf] = true;
    interior [0.0,4.0] [-inf,+inf] = true;
    interior [empty] [-inf,+inf] = true;
    interior [-inf,+inf] [0.0,4.0] = false;

    interior [0.0,4.0] [0.0,4.0] = false;
    interior [1.0,2.0] [0.0,4.0] = true;
    interior [-2.0,2.0] [-2.0,4.0] = false;
    interior [-0.0,-0.0] [-2.0,4.0] = true;
    interior [0.0,0.0] [-2.0,4.0] = true;
    interior [0.0,0.0] [-0.0,-0.0] = false;

    interior [0.0,4.4] [0.0,4.0] = false;
    interior [-1.0,-1.0] [0.0,4.0] = false;
    interior [2.0,2.0] [-2.0,-1.0] = false;
}

testcase minimal_interior_dec_test {
    interior [empty] [0.0,4.0]_trv = true;
    interior [0.0,4.0]_def [empty] = false;

    interior [0.0,4.0]_trv [empty] = false;

    interior [-inf,+inf]_trv [-inf,+inf]_trv = true;
    interior [0.0,4.0]_trv [-inf,+inf]_trv = true;
    interior [empty] [-inf,+inf]_trv = true;
    interior [-inf,+inf]_trv [0.0,4.0]_trv = false;

    interior [0.0,4.0]_trv [0.0,4.0]_trv = false;
    interior [1.0,2.0]_def [0.0,4.0]_trv = true;
    interior [-2.0,2.0]_trv [-2.0,4.0]_def = false;
    interior [-0.0,-0.0]_trv [-2.0,4.0]_trv = true;
    interior [0.0,0.0]_def [-2.0,4.0]_trv = true;
    interior [0.0,0.0]_trv [-0.0,-0.0]_trv = false;

    interior [0.0,4.4]_trv [0.0,4.0]_trv = false;
    interior [-1.0,-1.0]_trv [0.0,4.0]_def = false;
    interior [2.0,2.0]_def [-2.0,-1.0]_trv = false;
}

testcase minimal_strictLess_test {
    strictLess [empty] [empty] = true;
    strictLess [1.0,2.0] [empty] = false;
    strictLess [empty] [1.0,2.0] = false;

    strictLess [-inf,+inf] [-inf,+inf] = true;
    strictLess [1.0,2.0] [-inf,+inf] = false;
    strictLess [-inf,+inf] [1.0,2.0] = false;

    strictLess [1.0,2.0] [1.0,2.0] = false;
    strictLess [1.0,2.0] [3.0,4.0] = true;
    strictLess [1.0,3.5] [3.0,4.0] = true;
    strictLess [1.0,4.0] [3.0,4.0] = false;
    strictLess [0.0,4.0] [0.0,4.0] = false;
    strictLess [-0.0,4.0] [0.0,4.0] = false;

    strictLess [-2.0,-1.0] [-2.0,-1.0] = false;
    strictLess [-3.0,-1.5] [-2.0,-1.0] = true;
}

testcase minimal_strictLess_dec_test {
    strictLess [1.0,2.0]_trv [empty] = false;
    strictLess [empty] [1.0,2.0]_def = false;

    strictLess [1.0,2.0]_def [empty] = false;
    strictLess [empty] [1.0,2.0]_def = false;

    strictLess [-inf,+inf]_trv [-inf,+inf]_trv = true;
    strictLess [1.0,2.0]_trv [-inf,+inf]_trv = false;
    strictLess [-inf,+inf]_trv [1.0,2.0]_trv = false;

    strictLess [1.0,2.0]_trv [1.0,2.0]_trv = false;
    strictLess [1.0,2.0]_trv [3.0,4.0]_trv = true;
    strictLess [1.0,3.5]_def [3.0,4.0]_trv = true;
    strictLess [1.0,4.0]_trv [3.0,4.0]_def = false;
    strictLess [0.0,4.0]_trv [0.0,4.0]_def = false;
    strictLess [-0.0,4.0]_def [0.0,4.0]_trv = false;

    strictLess [-2.0,-1.0]_def [-2.0,-1.0]_def = false;
    strictLess [-3.0,-1.5]_trv [-2.0,-1.0]_trv = true;
}

testcase minimal_strictPrecedes_test {
    strictPrecedes [empty] [3.0,4.0] = true;
    strictPrecedes [3.0,4.0] [empty] = true;
    strictPrecedes [empty] [empty] = true;


    strictPrecedes [1.0,2.0] [-inf,+inf] = false;
    strictPrecedes [-inf,+inf] [1.0,2.0] = false;
    strictPrecedes [-inf,+inf] [-inf,+inf] = false;

    strictPrecedes [1.0,2.0] [3.0,4.0] = true;
    strictPrecedes [1.0,3.0] [3.0,4.0] = false;
    strictPrecedes [-3.0, -1.0] [-1.0,0.0] = false;
    strictPrecedes [-3.0, -0.0] [0.0,1.0] = false;
    strictPrecedes [-3.0, 0.0] [-0.0,1.0] = false;

    strictPrecedes [1.0,3.5] [3.0,4.0] = false;
    strictPrecedes [1.0,4.0] [3.0,4.0] = false;
    strictPrecedes [-3.0, -0.1] [-1.0,0.0] = false;
}

testcase minimal_strictPrecedes_dec_test {
    strictPrecedes [empty] [3.0,4.0]_trv = true;
    strictPrecedes [3.0,4.0]_def [empty] = true;

    strictPrecedes [empty] [3.0,4.0]_trv = true;
    strictPrecedes [3.0,4.0]_def [empty] = true;

    strictPrecedes [1.0,2.0]_trv [-inf,+inf]_trv = false;
    strictPrecedes [-inf,+inf]_trv [1.0,2.0]_trv = false;
    strictPrecedes [-inf,+inf]_trv [-inf,+inf]_trv = false;

    strictPrecedes [1.0,2.0]_trv [3.0,4.0]_trv = true;
    strictPrecedes [1.0,3.0]_def [3.0,4.0]_trv = false;
    strictPrecedes [-3.0, -1.0]_trv [-1.0,0.0]_def = false;
    strictPrecedes [-3.0, -0.0]_def [0.0,1.0]_trv = false;
    strictPrecedes [-3.0, 0.0]_trv [-0.0,1.0]_trv = false;

    strictPrecedes [1.0,3.5]_trv [3.0,4.0]_trv = false;
    strictPrecedes [1.0,4.0]_trv [3.0,4.0]_def = false;
    strictPrecedes [-3.0, -0.1]_trv [-1.0,0.0]_trv = false;
}

testcase minimal_disjoint_test {
    disjoint [empty] [3.0,4.0] = true;
    disjoint [3.0,4.0] [empty] = true;
    disjoint [empty] [empty] = true;

    disjoint [3.0,4.0] [1.0,2.0] = true;

    disjoint [0.0,0.0] [-0.0,-0.0] = false;
    disjoint [0.0,-0.0] [-0.0,0.0] = false;
    disjoint [3.0,4.0] [1.0,7.0] = false;
    disjoint [3.0,4.0] [-inf,+inf] = false;
    disjoint [-inf,+inf] [1.0,7.0] = false;
    disjoint [-inf,+inf] [-inf,+inf] = false;
}

testcase minimal_disjoint_dec_test {
    disjoint [empty] [3.0,4.0]_def = true;
    disjoint [3.0,4.0]_trv [empty] = true;

    disjoint [empty] [3.0,4.0]_trv = true;
    disjoint [3.0,4.0]_trv [empty] = true;

    disjoint [3.0,4.0]_trv [1.0,2.0]_def = true;

    disjoint [0.0,0.0]_trv [-0.0,-0.0]_trv = false;
    disjoint [0.0,-0.0]_trv [-0.0,0.0]_trv = false;
    disjoint [3.0,4.0]_def [1.0,7.0]_def = false;
    disjoint [3.0,4.0]_trv [-inf,+inf]_trv = false;
    disjoint [-inf,+inf]_trv [1.0,7.0]_trv = false;
    disjoint [-inf,+inf]_trv [-inf,+inf]_trv = false;
}
