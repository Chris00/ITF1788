/*
Copyright 2014

Marco Nehmeier (nehmeier@informatik.uni-wuerzburg.de)
Maximilian Kiesner (maximilian.kiesner@stud-mail.uni-wuerzburg.de)
Oliver Heimlich (oheim@posteo.de)

Department of Computer Science
University of Wuerzburg, Germany

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

testcase minimal.pos_test {
    pos [1.0, 2.0] = [1.0, 2.0];
    pos [empty] = [empty];
    pos [entire] = [entire];
    pos [1.0, inf] = [1.0, inf];
    pos [-inf, -1.0] = [-inf, -1.0];
}

testcase minimal.neg_test {
    neg [1.0, 2.0] = [-2.0, -1.0];
    neg [empty] = [empty];
    neg [entire] = [entire];
    neg [1.0, inf] = [-inf, -1.0];
    neg [-inf, 1.0] = [-1.0, inf];
}

testcase minimal.add_test {
    add [empty] [empty] = [empty];
    add [-1.0, 1.0] [empty] = [empty];
    add [empty] [-1.0, 1.0] = [empty];
    add [empty] [entire] = [empty];
    add [entire] [empty] = [empty];
    add [entire] [-inf, 1.0] = [entire];
    add [entire] [-1.0, 1.0] = [entire];
    add [entire] [-1.0, inf] = [entire];
    add [entire] [entire] = [entire];
    add [-inf, 1.0] [entire] = [entire];
    add [-1.0, 1.0] [entire] = [entire];
    add [-1.0, inf] [entire] = [entire];
    add [-inf, 2.0] [-inf, 4.0] = [-inf, 6.0];
    add [-inf, 2.0] [3.0, 4.0] = [-inf, 6.0];
    add [-inf, 2.0] [3.0, inf] = [entire];
    add [1.0, 2.0] [-inf, 4.0] = [-inf, 6.0];
    add [1.0, 2.0] [3.0, 4.0] = [4.0, 6.0];
    add [1.0, 2.0] [3.0, inf] = [4.0, inf];
    add [1.0, inf] [-inf, 4.0] = [entire];
    add [1.0, inf] [3.0, 4.0] = [4.0, inf];
    add [1.0, inf] [3.0, inf] = [4.0, inf];
    #add [1.0, MAX] [3.0, 4.0] = [4.0, inf];
    #add [-MAX, 2.0] [-3.0, 4.0] = [-inf, 6.0];
    #add [-MAX, 2.0] [-3.0, MAX] = [entire];
    #add [0X1.FFFFFFFFFFFFP+0] [0X1.999999999999AP-4] = [0X1.0CCCCCCCCCCC4P+1, 0X1.0CCCCCCCCCCC5P+1];
    #add [0X1.FFFFFFFFFFFFP+0] [-0X1.999999999999AP-4] = [0X1.E666666666656P+0, 0X1.E666666666657P+0];
    #add [-0X1.FFFFFFFFFFFFP+0, 0X1.FFFFFFFFFFFFP+0] [0X1.999999999999AP-4] = [-0X1.E666666666657P+0, 0X1.0CCCCCCCCCCC5P+1];
}

testcase minimal.sub_test {
    sub [empty] [empty] = [empty];
    sub [-1.0, 1.0] [empty] = [empty];
    sub [empty] [-1.0, 1.0] = [empty];
    sub [empty] [entire] = [empty];
    sub [entire] [empty] = [empty];
    sub [entire] [-inf, 1.0] = [entire];
    sub [entire] [-1.0, 1.0] = [entire];
    sub [entire] [-1.0, inf] = [entire];
    sub [entire] [entire] = [entire];
    sub [-inf, 1.0] [entire] = [entire];
    sub [-1.0, 1.0] [entire] = [entire];
    sub [-1.0, inf] [entire] = [entire];
    sub [-inf, 2.0] [-inf, 4.0] = [entire];
    sub [-inf, 2.0] [3.0, 4.0] = [-inf, -1.0];
    sub [-inf, 2.0] [3.0, inf] = [-inf, -1.0];
    sub [1.0, 2.0] [-inf, 4.0] = [-3.0, inf];
    sub [1.0, 2.0] [3.0, 4.0] = [-3.0, -1.0];
    sub [1.0, 2.0] [3.0, inf] = [-inf, -1.0];
    sub [1.0, inf] [-inf, 4.0] = [-3.0, inf];
    sub [1.0, inf] [3.0, 4.0] = [-3.0, inf];
    sub [1.0, inf] [3.0, inf] = [entire];
    #sub [1.0, MAX] [-3.0, 4.0] = [-3.0, inf];
    #sub [-MAX, 2.0] [3.0, 4.0] = [-inf, -1.0];
    #sub [-MAX, 2.0] [-MAX, 4.0] = [entire];
    #sub [0X1.FFFFFFFFFFFFP+0] [0X1.999999999999AP-4] = [0X1.E666666666656P+0, 0X1.E666666666657P+0];
    #sub [0X1.FFFFFFFFFFFFP+0] [-0X1.999999999999AP-4] = [0X1.0CCCCCCCCCCC4P+1, 0X1.0CCCCCCCCCCC5P+1];
    #sub [-0X1.FFFFFFFFFFFFP+0, 0X1.FFFFFFFFFFFFP+0] [0X1.999999999999AP-4] = [-0X1.0CCCCCCCCCCC5P+1, 0X1.E666666666657P+0];
}

testcase minimal.mul_test {
    mul [empty] [empty] = [empty];
    mul [-1.0, 1.0] [empty] = [empty];
    mul [empty] [-1.0, 1.0] = [empty];
    mul [empty] [entire] = [empty];
    mul [entire] [empty] = [empty];
    #mul [0.0] [empty] = [empty];
    #mul [empty] [0.0] = [empty];
    #mul [entire] [0.0] = [0.0];
    mul [entire] [-5.0, -1.0] = [entire];
    mul [entire] [-5.0, 3.0] = [entire];
    mul [entire] [1.0, 3.0] = [entire];
    mul [entire] [-inf, -1.0] = [entire];
    mul [entire] [-inf, 3.0] = [entire];
    mul [entire] [-5.0, inf] = [entire];
    mul [entire] [1.0, inf] = [entire];
    mul [entire] [entire] = [entire];
    #mul [1.0, inf] [0.0] = [0.0];
    mul [1.0, inf] [-5.0, -1.0] = [-inf, -1.0];
    mul [1.0, inf] [-5.0, 3.0] = [entire];
    mul [1.0, inf] [1.0, 3.0] = [1.0, inf];
    mul [1.0, inf] [-inf, -1.0] = [-inf, -1.0];
    mul [1.0, inf] [-inf, 3.0] = [entire];
    mul [1.0, inf] [-5.0, inf] = [entire];
    mul [1.0, inf] [1.0, inf] = [1.0, inf];
    mul [1.0, inf] [entire] = [entire];
    #mul [-1.0, inf] [0.0] = [0.0];
    mul [-1.0, inf] [-5.0, -1.0] = [-inf, 5.0];
    mul [-1.0, inf] [-5.0, 3.0] = [entire];
    mul [-1.0, inf] [1.0, 3.0] = [-3.0, inf];
    mul [-1.0, inf] [-inf, -1.0] = [entire];
    mul [-1.0, inf] [-inf, 3.0] = [entire];
    mul [-1.0, inf] [-5.0, inf] = [entire];
    mul [-1.0, inf] [1.0, inf] = [entire];
    mul [-1.0, inf] [entire] = [entire];
    #mul [-inf, 3.0] [0.0] = [0.0];
    mul [-inf, 3.0] [-5.0, -1.0] = [-15.0, inf];
    mul [-inf, 3.0] [-5.0, 3.0] = [entire];
    mul [-inf, 3.0] [1.0, 3.0] = [-inf, 9.0];
    mul [-inf, 3.0] [-inf, -1.0] = [entire];
    mul [-inf, 3.0] [-inf, 3.0] = [entire];
    mul [-inf, 3.0] [-5.0, inf] = [entire];
    mul [-inf, 3.0] [1.0, inf] = [entire];
    mul [-inf, 3.0] [entire] = [entire];
    #mul [-inf, -3.0] [0.0] = [0.0];
    mul [-inf, -3.0] [-5.0, -1.0] = [3.0, inf];
    mul [-inf, -3.0] [-5.0, 3.0] = [entire];
    mul [-inf, -3.0] [1.0, 3.0] = [-inf, -3.0];
    mul [-inf, -3.0] [-inf, -1.0] = [3.0, inf];
    mul [-inf, -3.0] [-inf, 3.0] = [entire];
    mul [-inf, -3.0] [-5.0, inf] = [entire];
    mul [-inf, -3.0] [1.0, inf] = [-inf, -3.0];
    mul [-inf, -3.0] [entire] = [entire];
    #mul [0.0] [0.0] = [0.0];
    #mul [0.0] [-5.0, -1.0] = [0.0];
    #mul [0.0] [-5.0, 3.0] = [0.0];
    #mul [0.0] [1.0, 3.0] = [0.0];
    #mul [0.0] [-inf, -1.0] = [0.0];
    #mul [0.0] [-inf, 3.0] = [0.0];
    #mul [0.0] [-5.0, inf] = [0.0];
    #mul [0.0] [1.0, inf] = [0.0];
    #mul [0.0] [entire] = [0.0];
    #mul [1.0, 5.0] [0.0] = [0.0];
    mul [1.0, 5.0] [-5.0, -1.0] = [-25.0, -1.0];
    mul [1.0, 5.0] [-5.0, 3.0] = [-25.0, 15.0];
    mul [1.0, 5.0] [1.0, 3.0] = [1.0, 15.0];
    mul [1.0, 5.0] [-inf, -1.0] = [-inf, -1.0];
    mul [1.0, 5.0] [-inf, 3.0] = [-inf, 15.0];
    mul [1.0, 5.0] [-5.0, inf] = [-25.0, inf];
    mul [1.0, 5.0] [1.0, inf] = [1.0, inf];
    mul [1.0, 5.0] [entire] = [entire];
    #mul [-1.0, 5.0] [0.0] = [0.0];
    mul [-1.0, 5.0] [-5.0, -1.0] = [-25.0, 5.0];
    mul [-1.0, 5.0] [-5.0, 3.0] = [-25.0, 15.0];
    mul [-10.0, 2.0] [-5.0, 3.0] = [-30.0, 50.0];
    mul [-1.0, 5.0] [-1.0, 10.0] = [-10.0, 50.0];
    mul [-2.0, 2.0] [-5.0, 3.0] = [-10.0, 10.0];
    mul [-1.0, 5.0] [1.0, 3.0] = [-3.0, 15.0];
    mul [-1.0, 5.0] [-inf, -1.0] = [entire];
    mul [-1.0, 5.0] [-inf, 3.0] = [entire];
    mul [-1.0, 5.0] [-5.0, inf] = [entire];
    mul [-1.0, 5.0] [1.0, inf] = [entire];
    mul [-1.0, 5.0] [entire] = [entire];
    #mul [-10.0, -5.0] [0.0] = [0.0];
    mul [-10.0, -5.0] [-5.0, -1.0] = [5.0, 50.0];
    mul [-10.0, -5.0] [-5.0, 3.0] = [-30.0, 50.0];
    mul [-10.0, -5.0] [1.0, 3.0] = [-30.0, -5.0];
    mul [-10.0, -5.0] [-inf, -1.0] = [5.0, inf];
    mul [-10.0, -5.0] [-inf, 3.0] = [-30.0, inf];
    mul [-10.0, -5.0] [-5.0, inf] = [-inf, 50.0];
    mul [-10.0, -5.0] [1.0, inf] = [-inf, -5.0];
    mul [-10.0, -5.0] [entire] = [entire];
    mul [0X1.999999999999AP-4, 0X1.FFFFFFFFFFFFP+0] [-0X1.FFFFFFFFFFFFP+0, inf] = [-0X1.FFFFFFFFFFFE1P+1, inf];
    mul [-0X1.999999999999AP-4, 0X1.FFFFFFFFFFFFP+0] [-0X1.FFFFFFFFFFFFP+0, -0X1.999999999999AP-4] = [-0X1.FFFFFFFFFFFE1P+1, 0X1.999999999998EP-3];
    mul [-0X1.999999999999AP-4, 0X1.999999999999AP-4] [-0X1.FFFFFFFFFFFFP+0, 0X1.999999999999AP-4] = [-0X1.999999999998EP-3, 0X1.999999999998EP-3];
    mul [-0X1.FFFFFFFFFFFFP+0, -0X1.999999999999AP-4] [0X1.999999999999AP-4, 0X1.FFFFFFFFFFFFP+0] = [-0X1.FFFFFFFFFFFE1P+1, -0X1.47AE147AE147BP-7];
}


testcase minimal.div_test {
    div [empty] [empty] = [empty];
    div [-1.0, 1.0] [empty] = [empty];
    div [empty] [-1.0, 1.0] = [empty];
    div [empty] [0.1, 1.0] = [empty];
    div [empty] [-1.0, -0.1] = [empty];
    div [empty] [entire] = [empty];
    div [entire] [empty] = [empty];
    #div [0.0] [empty] = [empty];
    #div [empty] [0.0] = [empty];
    div [entire] [-5.0, -3.0] = [entire];
    div [entire] [3.0, 5.0] = [entire];
    div [entire] [-inf, -3.0] = [entire];
    div [entire] [3.0, inf] = [entire];
    #div [entire] [0.0] = [empty];
    div [entire] [-3.0, 0.0] = [entire];
    div [entire] [-3.0, 3.0] = [entire];
    div [entire] [0.0, 3.0] = [entire];
    div [entire] [-inf, 0.0] = [entire];
    div [entire] [-inf, 3.0] = [entire];
    div [entire] [-3.0, inf] = [entire];
    div [entire] [0.0, inf] = [entire];
    div [entire] [entire] = [entire];
    div [-30.0, -15.0] [-5.0, -3.0] = [3.0, 10.0];
    div [-30.0, -15.0] [3.0, 5.0] = [-10.0, -3.0];
    div [-30.0, -15.0] [-inf, -3.0] = [0.0, 10.0];
    div [-30.0, -15.0] [3.0, inf] = [-10.0, 0.0];
    #div [-30.0, -15.0] [0.0] = [empty];
    div [-30.0, -15.0] [-3.0, 0.0] = [5.0, inf];
    div [-30.0, -15.0] [-3.0, 3.0] = [entire];
    div [-30.0, -15.0] [0.0, 3.0] = [-inf, -5.0];
    div [-30.0, -15.0] [-inf, 0.0] = [0.0, inf];
    div [-30.0, -15.0] [-inf, 3.0] = [entire];
    div [-30.0, -15.0] [-3.0, inf] = [entire];
    div [-30.0, -15.0] [0.0, inf] = [-inf, 0.0];
    div [-30.0, -15.0] [entire] = [entire];
    div [-30.0, 15.0] [-5.0, -3.0] = [-5.0, 10.0];
    div [-30.0, 15.0] [3.0, 5.0] = [-10.0, 5.0];
    div [-30.0, 15.0] [-inf, -3.0] = [-5.0, 10.0];
    div [-30.0, 15.0] [3.0, inf] = [-10.0, 5.0];
    #div [-30.0, 15.0] [0.0] = [empty];
    div [-30.0, 15.0] [-3.0, 0.0] = [entire];
    div [-30.0, 15.0] [-3.0, 3.0] = [entire];
    div [-30.0, 15.0] [0.0, 3.0] = [entire];
    div [-30.0, 15.0] [-inf, 0.0] = [entire];
    div [-30.0, 15.0] [-inf, 3.0] = [entire];
    div [-30.0, 15.0] [-3.0, inf] = [entire];
    div [-30.0, 15.0] [0.0, inf] = [entire];
    div [-30.0, 15.0] [entire] = [entire];
    div [15.0, 30.0] [-5.0, -3.0] = [-10.0, -3.0];
    div [15.0, 30.0] [3.0, 5.0] = [3.0, 10.0];
    div [15.0, 30.0] [-inf, -3.0] = [-10.0, 0.0];
    div [15.0, 30.0] [3.0, inf] = [0.0, 10.0];
    #div [15.0, 30.0] [0.0] = [empty];
    div [15.0, 30.0] [-3.0, 0.0] = [-inf, -5.0];
    div [15.0, 30.0] [-3.0, 3.0] = [entire];
    div [15.0, 30.0] [0.0, 3.0] = [5.0, inf];
    div [15.0, 30.0] [-inf, 0.0] = [-inf, 0.0];
    div [15.0, 30.0] [-inf, 3.0] = [entire];
    div [15.0, 30.0] [-3.0, inf] = [entire];
    div [15.0, 30.0] [0.0, inf] = [0.0, inf];
    div [15.0, 30.0] [entire] = [entire];
    #div [0.0] [-5.0, -3.0] = [0.0];
    #div [0.0] [3.0, 5.0] = [0.0];
    #div [0.0] [-inf, -3.0] = [0.0];
    #div [0.0] [3.0, inf] = [0.0];
    #div [0.0] [0.0] = [empty];
    #div [0.0] [-3.0, 0.0] = [0.0];
    #div [0.0] [-3.0, 3.0] = [0.0];
    #div [0.0] [0.0, 3.0] = [0.0];
    #div [0.0] [-inf, 0.0] = [0.0];
    #div [0.0] [-inf, 3.0] = [0.0];
    #div [0.0] [-3.0, inf] = [0.0];
    #div [0.0] [0.0, inf] = [0.0];
    #div [0.0] [entire] = [0.0];
    div [-inf, -15.0] [-5.0, -3.0] = [3.0, inf];
    div [-inf, -15.0] [3.0, 5.0] = [-inf, -3.0];
    div [-inf, -15.0] [-inf, -3.0] = [0.0, inf];
    div [-inf, -15.0] [3.0, inf] = [-inf, 0.0];
    #div [-inf, -15.0] [0.0] = [empty];
    div [-inf, -15.0] [-3.0, 0.0] = [5.0, inf];
    div [-inf, -15.0] [-3.0, 3.0] = [entire];
    div [-inf, -15.0] [0.0, 3.0] = [-inf, -5.0];
    div [-inf, -15.0] [-inf, 0.0] = [0.0, inf];
    div [-inf, -15.0] [-inf, 3.0] = [entire];
    div [-inf, -15.0] [-3.0, inf] = [entire];
    div [-inf, -15.0] [0.0, inf] = [-inf, 0.0];
    div [-inf, -15.0] [entire] = [entire];
    div [-inf, 15.0] [-5.0, -3.0] = [-5.0, inf];
    div [-inf, 15.0] [3.0, 5.0] = [-inf, 5.0];
    div [-inf, 15.0] [-inf, -3.0] = [-5.0, inf];
    div [-inf, 15.0] [3.0, inf] = [-inf, 5.0];
    #div [-inf, 15.0] [0.0] = [empty];
    div [-inf, 15.0] [-3.0, 0.0] = [entire];
    div [-inf, 15.0] [-3.0, 3.0] = [entire];
    div [-inf, 15.0] [0.0, 3.0] = [entire];
    div [-inf, 15.0] [-inf, 0.0] = [entire];
    div [-inf, 15.0] [-inf, 3.0] = [entire];
    div [-inf, 15.0] [-3.0, inf] = [entire];
    div [-inf, 15.0] [0.0, inf] = [entire];
    div [-inf, 15.0] [entire] = [entire];
    div [-15.0, inf] [-5.0, -3.0] = [-inf, 5.0];
    div [-15.0, inf] [3.0, 5.0] = [-5.0, inf];
    div [-15.0, inf] [-inf, -3.0] = [-inf, 5.0];
    div [-15.0, inf] [3.0, inf] = [-5.0, inf];
    #div [-15.0, inf] [0.0] = [empty];
    div [-15.0, inf] [-3.0, 0.0] = [entire];
    div [-15.0, inf] [-3.0, 3.0] = [entire];
    div [-15.0, inf] [0.0, 3.0] = [entire];
    div [-15.0, inf] [-inf, 0.0] = [entire];
    div [-15.0, inf] [-inf, 3.0] = [entire];
    div [-15.0, inf] [-3.0, inf] = [entire];
    div [-15.0, inf] [0.0, inf] = [entire];
    div [-15.0, inf] [entire] = [entire];
    div [15.0, inf] [-5.0, -3.0] = [-inf, -3.0];
    div [15.0, inf] [3.0, 5.0] = [3.0, inf];
    div [15.0, inf] [-inf, -3.0] = [-inf, 0.0];
    div [15.0, inf] [3.0, inf] = [0.0, inf];
    #div [15.0, inf] [0.0] = [empty];
    div [15.0, inf] [-3.0, 0.0] = [-inf, -5.0];
    div [15.0, inf] [-3.0, 3.0] = [entire];
    div [15.0, inf] [0.0, 3.0] = [5.0, inf];
    div [15.0, inf] [-inf, 0.0] = [-inf, 0.0];
    div [15.0, inf] [-inf, 3.0] = [entire];
    div [15.0, inf] [-3.0, inf] = [entire];
    div [15.0, inf] [0.0, inf] = [0.0, inf];
    div [15.0, inf] [entire] = [entire];
    div [-30.0, 0.0] [-5.0, -3.0] = [0.0, 10.0];
    div [-30.0, 0.0] [3.0, 5.0] = [-10.0, 0.0];
    div [-30.0, 0.0] [-inf, -3.0] = [0.0, 10.0];
    div [-30.0, 0.0] [3.0, inf] = [-10.0, 0.0];
    #div [-30.0, 0.0] [0.0] = [empty];
    div [-30.0, 0.0] [-3.0, 0.0] = [0.0, inf];
    div [-30.0, 0.0] [-3.0, 3.0] = [entire];
    div [-30.0, 0.0] [0.0, 3.0] = [-inf, 0.0];
    div [-30.0, 0.0] [-inf, 0.0] = [0.0, inf];
    div [-30.0, 0.0] [-inf, 3.0] = [entire];
    div [-30.0, 0.0] [-3.0, inf] = [entire];
    div [-30.0, 0.0] [0.0, inf] = [-inf, 0.0];
    div [-30.0, 0.0] [entire] = [entire];
    div [0.0, 30.0] [-5.0, -3.0] = [-10.0, 0.0];
    div [0.0, 30.0] [3.0, 5.0] = [0.0, 10.0];
    div [0.0, 30.0] [-inf, -3.0] = [-10.0, 0.0];
    div [0.0, 30.0] [3.0, inf] = [0.0, 10.0];
    #div [0.0, 30.0] [0.0] = [empty];
    div [0.0, 30.0] [-3.0, 0.0] = [-inf, 0.0];
    div [0.0, 30.0] [-3.0, 3.0] = [entire];
    div [0.0, 30.0] [0.0, 3.0] = [0.0, inf];
    div [0.0, 30.0] [-inf, 0.0] = [-inf, 0.0];
    div [0.0, 30.0] [-inf, 3.0] = [entire];
    div [0.0, 30.0] [-3.0, inf] = [entire];
    div [0.0, 30.0] [0.0, inf] = [0.0, inf];
    div [0.0, 30.0] [entire] = [entire];
    div [-inf, 0.0] [-5.0, -3.0] = [0.0, inf];
    div [-inf, 0.0] [3.0, 5.0] = [-inf, 0.0];
    div [-inf, 0.0] [-inf, -3.0] = [0.0, inf];
    div [-inf, 0.0] [3.0, inf] = [-inf, 0.0];
    #div [-inf, 0.0] [0.0] = [empty];
    div [-inf, 0.0] [-3.0, 0.0] = [0.0, inf];
    div [-inf, 0.0] [-3.0, 3.0] = [entire];
    div [-inf, 0.0] [0.0, 3.0] = [-inf, 0.0];
    div [-inf, 0.0] [-inf, 0.0] = [0.0, inf];
    div [-inf, 0.0] [-inf, 3.0] = [entire];
    div [-inf, 0.0] [-3.0, inf] = [entire];
    div [-inf, 0.0] [0.0, inf] = [-inf, 0.0];
    div [-inf, 0.0] [entire] = [entire];
    div [0.0, inf] [-5.0, -3.0] = [-inf, 0.0];
    div [0.0, inf] [3.0, 5.0] = [0.0, inf];
    div [0.0, inf] [-inf, -3.0] = [-inf, 0.0];
    div [0.0, inf] [3.0, inf] = [0.0, inf];
    #div [0.0, inf] [0.0] = [empty];
    div [0.0, inf] [-3.0, 0.0] = [-inf, 0.0];
    div [0.0, inf] [-3.0, 3.0] = [entire];
    div [0.0, inf] [0.0, 3.0] = [0.0, inf];
    div [0.0, inf] [-inf, 0.0] = [-inf, 0.0];
    div [0.0, inf] [-inf, 3.0] = [entire];
    div [0.0, inf] [-3.0, inf] = [entire];
    div [0.0, inf] [0.0, inf] = [0.0, inf];
    div [0.0, inf] [entire] = [entire];
    div [-2.0, -1.0] [-10.0, -3.0] = [0X1.9999999999999P-4, 0X1.5555555555556P-1];
    div [-2.0, -1.0] [0.0, 10.0] = [-inf, -0X1.9999999999999P-4];
    div [-1.0, 2.0] [10.0, inf] = [-0X1.999999999999AP-4, 0X1.999999999999AP-3];
    div [1.0, 3.0] [-inf, -10.0] = [-0X1.3333333333334P-2, 0.0];
    div [-inf, -1.0] [1.0, 3.0] = [-inf, -0X1.5555555555555P-2];
}

testcase minimal.recip_test {
    recip [-50.0, -10.0] = [-0X1.999999999999AP-4, -0X1.47AE147AE147AP-6];
    recip [10.0, 50.0] = [0X1.47AE147AE147AP-6, 0X1.999999999999AP-4];
    recip [-inf, -10.0] = [-0X1.999999999999AP-4, 0.0];
    recip [10.0, inf] = [0.0, 0X1.999999999999AP-4];
    #recip [0.0] = [empty];
    recip [-10.0, 0.0] = [-inf, -0X1.9999999999999P-4];
    recip [-10.0, 10.0] = [entire];
    recip [0.0, 10.0] = [0X1.9999999999999P-4, inf];
    recip [-inf, 0.0] = [-inf, 0.0];
    recip [-inf, 10.0] = [entire];
    recip [-10.0, inf] = [entire];
    recip [0.0, inf] = [0.0, inf];
    recip [entire] = [entire];
}

testcase minimal.sqr_test {
    sqr [empty] = [empty];
    sqr [entire] = [0.0, inf];
    #sqr [-inf, -MIN] = [0.0, inf];
    sqr [-1.0, 1.0] = [0.0, 1.0];
    sqr [-5.0, 3.0] = [0.0, 25.0];
    #sqr [0X1.999999999999AP-4] = [0X1.47AE147AE147BP-7, 0X1.47AE147AE147CP-7];
    sqr [-0X1.FFFFFFFFFFFFP+0, 0X1.999999999999AP-4] = [0.0, 0X1.FFFFFFFFFFFE1P+1];
    #sqr [-0X1.FFFFFFFFFFFFP+0] = [0X1.FFFFFFFFFFFEP+1, 0X1.FFFFFFFFFFFE1P+1];
}

testcase minimal.sqrt_test {
    sqrt [empty] = [empty];
    sqrt [entire] = [0.0, inf];
    #sqrt [-inf, -MIN] = [empty];
    sqrt [-1.0, 1.0] = [0.0, 1.0];
    sqrt [-5.0, 25.0] = [0.0, 5.0];
    sqrt [-5.0, inf] = [0.0, inf];
    #sqrt [0X1.999999999999AP-4] = [0X1.43D136248490FP-2, 0X1.43D136248491P-2];
    sqrt [-0X1.FFFFFFFFFFFFP+0, 0X1.999999999999AP-4] = [0.0, 0X1.43D136248491P-2];
    sqrt [0X1.999999999999AP-4, 0X1.FFFFFFFFFFFFP+0] = [0X1.43D136248490FP-2, 0X1.6A09E667F3BC7P+0];
}

testcase minimal.fma_test {
    fma [empty] [empty] [empty] = [empty];
    fma [-1.0, 1.0] [empty] [empty] = [empty];
    fma [empty] [-1.0, 1.0] [empty] = [empty];
    fma [empty] [entire] [empty] = [empty];
    fma [entire] [empty] [empty] = [empty];
    #fma [0.0] [empty] [empty] = [empty];
    #fma [empty] [0.0] [empty] = [empty];
    #fma [entire] [0.0] [empty] = [empty];
    fma [entire] [-5.0, -1.0] [empty] = [empty];
    fma [entire] [-5.0, 3.0] [empty] = [empty];
    fma [entire] [1.0, 3.0] [empty] = [empty];
    fma [entire] [-inf, -1.0] [empty] = [empty];
    fma [entire] [-inf, 3.0] [empty] = [empty];
    fma [entire] [-5.0, inf] [empty] = [empty];
    fma [entire] [1.0, inf] [empty] = [empty];
    fma [entire] [entire] [empty] = [empty];
    #fma [1.0, inf] [0.0] [empty] = [empty];
    fma [1.0, inf] [-5.0, -1.0] [empty] = [empty];
    fma [1.0, inf] [-5.0, 3.0] [empty] = [empty];
    fma [1.0, inf] [1.0, 3.0] [empty] = [empty];
    fma [1.0, inf] [-inf, -1.0] [empty] = [empty];
    fma [1.0, inf] [-inf, 3.0] [empty] = [empty];
    fma [1.0, inf] [-5.0, inf] [empty] = [empty];
    fma [1.0, inf] [1.0, inf] [empty] = [empty];
    fma [1.0, inf] [entire] [empty] = [empty];
    #fma [-1.0, inf] [0.0] [empty] = [empty];
    fma [-1.0, inf] [-5.0, -1.0] [empty] = [empty];
    fma [-1.0, inf] [-5.0, 3.0] [empty] = [empty];
    fma [-1.0, inf] [1.0, 3.0] [empty] = [empty];
    fma [-1.0, inf] [-inf, -1.0] [empty] = [empty];
    fma [-1.0, inf] [-inf, 3.0] [empty] = [empty];
    fma [-1.0, inf] [-5.0, inf] [empty] = [empty];
    fma [-1.0, inf] [1.0, inf] [empty] = [empty];
    fma [-1.0, inf] [entire] [empty] = [empty];
    #fma [-inf, 3.0] [0.0] [empty] = [empty];
    fma [-inf, 3.0] [-5.0, -1.0] [empty] = [empty];
    fma [-inf, 3.0] [-5.0, 3.0] [empty] = [empty];
    fma [-inf, 3.0] [1.0, 3.0] [empty] = [empty];
    fma [-inf, 3.0] [-inf, -1.0] [empty] = [empty];
    fma [-inf, 3.0] [-inf, 3.0] [empty] = [empty];
    fma [-inf, 3.0] [-5.0, inf] [empty] = [empty];
    fma [-inf, 3.0] [1.0, inf] [empty] = [empty];
    fma [-inf, 3.0] [entire] [empty] = [empty];
    #fma [-inf, -3.0] [0.0] [empty] = [empty];
    fma [-inf, -3.0] [-5.0, -1.0] [empty] = [empty];
    fma [-inf, -3.0] [-5.0, 3.0] [empty] = [empty];
    fma [-inf, -3.0] [1.0, 3.0] [empty] = [empty];
    fma [-inf, -3.0] [-inf, -1.0] [empty] = [empty];
    fma [-inf, -3.0] [-inf, 3.0] [empty] = [empty];
    fma [-inf, -3.0] [-5.0, inf] [empty] = [empty];
    fma [-inf, -3.0] [1.0, inf] [empty] = [empty];
    fma [-inf, -3.0] [entire] [empty] = [empty];
    #fma [0.0] [0.0] [empty] = [empty];
    #fma [0.0] [-5.0, -1.0] [empty] = [empty];
    #fma [0.0] [-5.0, 3.0] [empty] = [empty];
    #fma [0.0] [1.0, 3.0] [empty] = [empty];
    #fma [0.0] [-inf, -1.0] [empty] = [empty];
    #fma [0.0] [-inf, 3.0] [empty] = [empty];
    #fma [0.0] [-5.0, inf] [empty] = [empty];
    #fma [0.0] [1.0, inf] [empty] = [empty];
    #fma [0.0] [entire] [empty] = [empty];
    #fma [1.0, 5.0] [0.0] [empty] = [empty];
    fma [1.0, 5.0] [-5.0, -1.0] [empty] = [empty];
    fma [1.0, 5.0] [-5.0, 3.0] [empty] = [empty];
    fma [1.0, 5.0] [1.0, 3.0] [empty] = [empty];
    fma [1.0, 5.0] [-inf, -1.0] [empty] = [empty];
    fma [1.0, 5.0] [-inf, 3.0] [empty] = [empty];
    fma [1.0, 5.0] [-5.0, inf] [empty] = [empty];
    fma [1.0, 5.0] [1.0, inf] [empty] = [empty];
    fma [1.0, 5.0] [entire] [empty] = [empty];
    #fma [-1.0, 5.0] [0.0] [empty] = [empty];
    fma [-1.0, 5.0] [-5.0, -1.0] [empty] = [empty];
    fma [-1.0, 5.0] [-5.0, 3.0] [empty] = [empty];
    fma [-10.0, 2.0] [-5.0, 3.0] [empty] = [empty];
    fma [-1.0, 5.0] [-1.0, 10.0] [empty] = [empty];
    fma [-2.0, 2.0] [-5.0, 3.0] [empty] = [empty];
    fma [-1.0, 5.0] [1.0, 3.0] [empty] = [empty];
    fma [-1.0, 5.0] [-inf, -1.0] [empty] = [empty];
    fma [-1.0, 5.0] [-inf, 3.0] [empty] = [empty];
    fma [-1.0, 5.0] [-5.0, inf] [empty] = [empty];
    fma [-1.0, 5.0] [1.0, inf] [empty] = [empty];
    fma [-1.0, 5.0] [entire] [empty] = [empty];
    #fma [-10.0, -5.0] [0.0] [empty] = [empty];
    fma [-10.0, -5.0] [-5.0, -1.0] [empty] = [empty];
    fma [-10.0, -5.0] [-5.0, 3.0] [empty] = [empty];
    fma [-10.0, -5.0] [1.0, 3.0] [empty] = [empty];
    fma [-10.0, -5.0] [-inf, -1.0] [empty] = [empty];
    fma [-10.0, -5.0] [-inf, 3.0] [empty] = [empty];
    fma [-10.0, -5.0] [-5.0, inf] [empty] = [empty];
    fma [-10.0, -5.0] [1.0, inf] [empty] = [empty];
    fma [-10.0, -5.0] [entire] [empty] = [empty];
    fma [empty] [empty] [-inf, 2.0] = [empty];
    fma [-1.0, 1.0] [empty] [-inf, 2.0] = [empty];
    fma [empty] [-1.0, 1.0] [-inf, 2.0] = [empty];
    fma [empty] [entire] [-inf, 2.0] = [empty];
    fma [entire] [empty] [-inf, 2.0] = [empty];
    #fma [0.0] [empty] [-inf, 2.0] = [empty];
    #fma [empty] [0.0] [-inf, 2.0] = [empty];
    #fma [entire] [0.0] [-inf, 2.0] = [-inf, 2.0];
    fma [entire] [-5.0, -1.0] [-inf, 2.0] = [entire];
    fma [entire] [-5.0, 3.0] [-inf, 2.0] = [entire];
    fma [entire] [1.0, 3.0] [-inf, 2.0] = [entire];
    fma [entire] [-inf, -1.0] [-inf, 2.0] = [entire];
    fma [entire] [-inf, 3.0] [-inf, 2.0] = [entire];
    fma [entire] [-5.0, inf] [-inf, 2.0] = [entire];
    fma [entire] [1.0, inf] [-inf, 2.0] = [entire];
    fma [entire] [entire] [-inf, 2.0] = [entire];
    #fma [1.0, inf] [0.0] [-inf, 2.0] = [-inf, 2.0];
    fma [1.0, inf] [-5.0, -1.0] [-inf, 2.0] = [-inf, 1.0];
    fma [1.0, inf] [-5.0, 3.0] [-inf, 2.0] = [entire];
    fma [1.0, inf] [1.0, 3.0] [-inf, 2.0] = [entire];
    fma [1.0, inf] [-inf, -1.0] [-inf, 2.0] = [-inf, 1.0];
    fma [1.0, inf] [-inf, 3.0] [-inf, 2.0] = [entire];
    fma [1.0, inf] [-5.0, inf] [-inf, 2.0] = [entire];
    fma [1.0, inf] [1.0, inf] [-inf, 2.0] = [entire];
    fma [1.0, inf] [entire] [-inf, 2.0] = [entire];
    #fma [-1.0, inf] [0.0] [-inf, 2.0] = [-inf, 2.0];
    fma [-1.0, inf] [-5.0, -1.0] [-inf, 2.0] = [-inf, 7.0];
    fma [-1.0, inf] [-5.0, 3.0] [-inf, 2.0] = [entire];
    fma [-1.0, inf] [1.0, 3.0] [-inf, 2.0] = [entire];
    fma [-1.0, inf] [-inf, -1.0] [-inf, 2.0] = [entire];
    fma [-1.0, inf] [-inf, 3.0] [-inf, 2.0] = [entire];
    fma [-1.0, inf] [-5.0, inf] [-inf, 2.0] = [entire];
    fma [-1.0, inf] [1.0, inf] [-inf, 2.0] = [entire];
    fma [-1.0, inf] [entire] [-inf, 2.0] = [entire];
    #fma [-inf, 3.0] [0.0] [-inf, 2.0] = [-inf, 2.0];
    fma [-inf, 3.0] [-5.0, -1.0] [-inf, 2.0] = [entire];
    fma [-inf, 3.0] [-5.0, 3.0] [-inf, 2.0] = [entire];
    fma [-inf, 3.0] [1.0, 3.0] [-inf, 2.0] = [-inf, 11.0];
    fma [-inf, 3.0] [-inf, -1.0] [-inf, 2.0] = [entire];
    fma [-inf, 3.0] [-inf, 3.0] [-inf, 2.0] = [entire];
    fma [-inf, 3.0] [-5.0, inf] [-inf, 2.0] = [entire];
    fma [-inf, 3.0] [1.0, inf] [-inf, 2.0] = [entire];
    fma [-inf, 3.0] [entire] [-inf, 2.0] = [entire];
    #fma [-inf, -3.0] [0.0] [-inf, 2.0] = [-inf, 2.0];
    fma [-inf, -3.0] [-5.0, -1.0] [-inf, 2.0] = [entire];
    fma [-inf, -3.0] [-5.0, 3.0] [-inf, 2.0] = [entire];
    fma [-inf, -3.0] [1.0, 3.0] [-inf, 2.0] = [-inf, -1.0];
    fma [-inf, -3.0] [-inf, -1.0] [-inf, 2.0] = [entire];
    fma [-inf, -3.0] [-inf, 3.0] [-inf, 2.0] = [entire];
    fma [-inf, -3.0] [-5.0, inf] [-inf, 2.0] = [entire];
    fma [-inf, -3.0] [1.0, inf] [-inf, 2.0] = [-inf, -1.0];
    fma [-inf, -3.0] [entire] [-inf, 2.0] = [entire];
    #fma [0.0] [0.0] [-inf, 2.0] = [-inf, 2.0];
    #fma [0.0] [-5.0, -1.0] [-inf, 2.0] = [-inf, 2.0];
    #fma [0.0] [-5.0, 3.0] [-inf, 2.0] = [-inf, 2.0];
    #fma [0.0] [1.0, 3.0] [-inf, 2.0] = [-inf, 2.0];
    #fma [0.0] [-inf, -1.0] [-inf, 2.0] = [-inf, 2.0];
    #fma [0.0] [-inf, 3.0] [-inf, 2.0] = [-inf, 2.0];
    #fma [0.0] [-5.0, inf] [-inf, 2.0] = [-inf, 2.0];
    #fma [0.0] [1.0, inf] [-inf, 2.0] = [-inf, 2.0];
    #fma [0.0] [entire] [-inf, 2.0] = [-inf, 2.0];
    #fma [1.0, 5.0] [0.0] [-inf, 2.0] = [-inf, 2.0];
    fma [1.0, 5.0] [-5.0, -1.0] [-inf, 2.0] = [-inf, 1.0];
    fma [1.0, 5.0] [-5.0, 3.0] [-inf, 2.0] = [-inf, 17.0];
    fma [1.0, 5.0] [1.0, 3.0] [-inf, 2.0] = [-inf, 17.0];
    fma [1.0, 5.0] [-inf, -1.0] [-inf, 2.0] = [-inf, 1.0];
    fma [1.0, 5.0] [-inf, 3.0] [-inf, 2.0] = [-inf, 17.0];
    fma [1.0, 5.0] [-5.0, inf] [-inf, 2.0] = [entire];
    fma [1.0, 5.0] [1.0, inf] [-inf, 2.0] = [entire];
    fma [1.0, 5.0] [entire] [-inf, 2.0] = [entire];
    #fma [-1.0, 5.0] [0.0] [-inf, 2.0] = [-inf, 2.0];
    fma [-1.0, 5.0] [-5.0, -1.0] [-inf, 2.0] = [-inf, 7.0];
    fma [-1.0, 5.0] [-5.0, 3.0] [-inf, 2.0] = [-inf, 17.0];
    fma [-10.0, 2.0] [-5.0, 3.0] [-inf, 2.0] = [-inf, 52.0];
    fma [-1.0, 5.0] [-1.0, 10.0] [-inf, 2.0] = [-inf, 52.0];
    fma [-2.0, 2.0] [-5.0, 3.0] [-inf, 2.0] = [-inf, 12.0];
    fma [-1.0, 5.0] [1.0, 3.0] [-inf, 2.0] = [-inf, 17.0];
    fma [-1.0, 5.0] [-inf, -1.0] [-inf, 2.0] = [entire];
    fma [-1.0, 5.0] [-inf, 3.0] [-inf, 2.0] = [entire];
    fma [-1.0, 5.0] [-5.0, inf] [-inf, 2.0] = [entire];
    fma [-1.0, 5.0] [1.0, inf] [-inf, 2.0] = [entire];
    fma [-1.0, 5.0] [entire] [-inf, 2.0] = [entire];
    #fma [-10.0, -5.0] [0.0] [-inf, 2.0] = [-inf, 2.0];
    fma [-10.0, -5.0] [-5.0, -1.0] [-inf, 2.0] = [-inf, 52.0];
    fma [-10.0, -5.0] [-5.0, 3.0] [-inf, 2.0] = [-inf, 52.0];
    fma [-10.0, -5.0] [1.0, 3.0] [-inf, 2.0] = [-inf, -3.0];
    fma [-10.0, -5.0] [-inf, -1.0] [-inf, 2.0] = [entire];
    fma [-10.0, -5.0] [-inf, 3.0] [-inf, 2.0] = [entire];
    fma [-10.0, -5.0] [-5.0, inf] [-inf, 2.0] = [-inf, 52.0];
    fma [-10.0, -5.0] [1.0, inf] [-inf, 2.0] = [-inf, -3.0];
    fma [-10.0, -5.0] [entire] [-inf, 2.0] = [entire];
    fma [empty] [empty] [-2.0, 2.0] = [empty];
    fma [-1.0, 1.0] [empty] [-2.0, 2.0] = [empty];
    fma [empty] [-1.0, 1.0] [-2.0, 2.0] = [empty];
    fma [empty] [entire] [-2.0, 2.0] = [empty];
    fma [entire] [empty] [-2.0, 2.0] = [empty];
    #fma [0.0] [empty] [-2.0, 2.0] = [empty];
    #fma [empty] [0.0] [-2.0, 2.0] = [empty];
    #fma [entire] [0.0] [-2.0, 2.0] = [-2.0, 2.0];
    fma [entire] [-5.0, -1.0] [-2.0, 2.0] = [entire];
    fma [entire] [-5.0, 3.0] [-2.0, 2.0] = [entire];
    fma [entire] [1.0, 3.0] [-2.0, 2.0] = [entire];
    fma [entire] [-inf, -1.0] [-2.0, 2.0] = [entire];
    fma [entire] [-inf, 3.0] [-2.0, 2.0] = [entire];
    fma [entire] [-5.0, inf] [-2.0, 2.0] = [entire];
    fma [entire] [1.0, inf] [-2.0, 2.0] = [entire];
    fma [entire] [entire] [-2.0, 2.0] = [entire];
    #fma [1.0, inf] [0.0] [-2.0, 2.0] = [-2.0, 2.0];
    fma [1.0, inf] [-5.0, -1.0] [-2.0, 2.0] = [-inf, 1.0];
    fma [1.0, inf] [-5.0, 3.0] [-2.0, 2.0] = [entire];
    fma [1.0, inf] [1.0, 3.0] [-2.0, 2.0] = [-1.0, inf];
    fma [1.0, inf] [-inf, -1.0] [-2.0, 2.0] = [-inf, 1.0];
    fma [1.0, inf] [-inf, 3.0] [-2.0, 2.0] = [entire];
    fma [1.0, inf] [-5.0, inf] [-2.0, 2.0] = [entire];
    fma [1.0, inf] [1.0, inf] [-2.0, 2.0] = [-1.0, inf];
    fma [1.0, inf] [entire] [-2.0, 2.0] = [entire];
    #fma [-1.0, inf] [0.0] [-2.0, 2.0] = [-2.0, 2.0];
    fma [-1.0, inf] [-5.0, -1.0] [-2.0, 2.0] = [-inf, 7.0];
    fma [-1.0, inf] [-5.0, 3.0] [-2.0, 2.0] = [entire];
    fma [-1.0, inf] [1.0, 3.0] [-2.0, 2.0] = [-5.0, inf];
    fma [-1.0, inf] [-inf, -1.0] [-2.0, 2.0] = [entire];
    fma [-1.0, inf] [-inf, 3.0] [-2.0, 2.0] = [entire];
    fma [-1.0, inf] [-5.0, inf] [-2.0, 2.0] = [entire];
    fma [-1.0, inf] [1.0, inf] [-2.0, 2.0] = [entire];
    fma [-1.0, inf] [entire] [-2.0, 2.0] = [entire];
    #fma [-inf, 3.0] [0.0] [-2.0, 2.0] = [-2.0, 2.0];
    fma [-inf, 3.0] [-5.0, -1.0] [-2.0, 2.0] = [-17.0, inf];
    fma [-inf, 3.0] [-5.0, 3.0] [-2.0, 2.0] = [entire];
    fma [-inf, 3.0] [1.0, 3.0] [-2.0, 2.0] = [-inf, 11.0];
    fma [-inf, 3.0] [-inf, -1.0] [-2.0, 2.0] = [entire];
    fma [-inf, 3.0] [-inf, 3.0] [-2.0, 2.0] = [entire];
    fma [-inf, 3.0] [-5.0, inf] [-2.0, 2.0] = [entire];
    fma [-inf, 3.0] [1.0, inf] [-2.0, 2.0] = [entire];
    fma [-inf, 3.0] [entire] [-2.0, 2.0] = [entire];
    #fma [-inf, -3.0] [0.0] [-2.0, 2.0] = [-2.0, 2.0];
    fma [-inf, -3.0] [-5.0, -1.0] [-2.0, 2.0] = [1.0, inf];
    fma [-inf, -3.0] [-5.0, 3.0] [-2.0, 2.0] = [entire];
    fma [-inf, -3.0] [1.0, 3.0] [-2.0, 2.0] = [-inf, -1.0];
    fma [-inf, -3.0] [-inf, -1.0] [-2.0, 2.0] = [1.0, inf];
    fma [-inf, -3.0] [-inf, 3.0] [-2.0, 2.0] = [entire];
    fma [-inf, -3.0] [-5.0, inf] [-2.0, 2.0] = [entire];
    fma [-inf, -3.0] [1.0, inf] [-2.0, 2.0] = [-inf, -1.0];
    fma [-inf, -3.0] [entire] [-2.0, 2.0] = [entire];
    #fma [0.0] [0.0] [-2.0, 2.0] = [-2.0, 2.0];
    #fma [0.0] [-5.0, -1.0] [-2.0, 2.0] = [-2.0, 2.0];
    #fma [0.0] [-5.0, 3.0] [-2.0, 2.0] = [-2.0, 2.0];
    #fma [0.0] [1.0, 3.0] [-2.0, 2.0] = [-2.0, 2.0];
    #fma [0.0] [-inf, -1.0] [-2.0, 2.0] = [-2.0, 2.0];
    #fma [0.0] [-inf, 3.0] [-2.0, 2.0] = [-2.0, 2.0];
    #fma [0.0] [-5.0, inf] [-2.0, 2.0] = [-2.0, 2.0];
    #fma [0.0] [1.0, inf] [-2.0, 2.0] = [-2.0, 2.0];
    #fma [0.0] [entire] [-2.0, 2.0] = [-2.0, 2.0];
    #fma [1.0, 5.0] [0.0] [-2.0, 2.0] = [-2.0, 2.0];
    fma [1.0, 5.0] [-5.0, -1.0] [-2.0, 2.0] = [-27.0, 1.0];
    fma [1.0, 5.0] [-5.0, 3.0] [-2.0, 2.0] = [-27.0, 17.0];
    fma [1.0, 5.0] [1.0, 3.0] [-2.0, 2.0] = [-1.0, 17.0];
    fma [1.0, 5.0] [-inf, -1.0] [-2.0, 2.0] = [-inf, 1.0];
    fma [1.0, 5.0] [-inf, 3.0] [-2.0, 2.0] = [-inf, 17.0];
    fma [1.0, 5.0] [-5.0, inf] [-2.0, 2.0] = [-27.0, inf];
    fma [1.0, 5.0] [1.0, inf] [-2.0, 2.0] = [-1.0, inf];
    fma [1.0, 5.0] [entire] [-2.0, 2.0] = [entire];
    #fma [-1.0, 5.0] [0.0] [-2.0, 2.0] = [-2.0, 2.0];
    fma [-1.0, 5.0] [-5.0, -1.0] [-2.0, 2.0] = [-27.0, 7.0];
    fma [-1.0, 5.0] [-5.0, 3.0] [-2.0, 2.0] = [-27.0, 17.0];
    fma [-10.0, 2.0] [-5.0, 3.0] [-2.0, 2.0] = [-32.0, 52.0];
    fma [-1.0, 5.0] [-1.0, 10.0] [-2.0, 2.0] = [-12.0, 52.0];
    fma [-2.0, 2.0] [-5.0, 3.0] [-2.0, 2.0] = [-12.0, 12.0];
    fma [-1.0, 5.0] [1.0, 3.0] [-2.0, 2.0] = [-5.0, 17.0];
    fma [-1.0, 5.0] [-inf, -1.0] [-2.0, 2.0] = [entire];
    fma [-1.0, 5.0] [-inf, 3.0] [-2.0, 2.0] = [entire];
    fma [-1.0, 5.0] [-5.0, inf] [-2.0, 2.0] = [entire];
    fma [-1.0, 5.0] [1.0, inf] [-2.0, 2.0] = [entire];
    fma [-1.0, 5.0] [entire] [-2.0, 2.0] = [entire];
    #fma [-10.0, -5.0] [0.0] [-2.0, 2.0] = [-2.0, 2.0];
    fma [-10.0, -5.0] [-5.0, -1.0] [-2.0, 2.0] = [3.0, 52.0];
    fma [-10.0, -5.0] [-5.0, 3.0] [-2.0, 2.0] = [-32.0, 52.0];
    fma [-10.0, -5.0] [1.0, 3.0] [-2.0, 2.0] = [-32.0, -3.0];
    fma [-10.0, -5.0] [-inf, -1.0] [-2.0, 2.0] = [3.0, inf];
    fma [-10.0, -5.0] [-inf, 3.0] [-2.0, 2.0] = [-32.0, inf];
    fma [-10.0, -5.0] [-5.0, inf] [-2.0, 2.0] = [-inf, 52.0];
    fma [-10.0, -5.0] [1.0, inf] [-2.0, 2.0] = [-inf, -3.0];
    fma [-10.0, -5.0] [entire] [-2.0, 2.0] = [entire];
    fma [empty] [empty] [-2.0, inf] = [empty];
    fma [-1.0, 1.0] [empty] [-2.0, inf] = [empty];
    fma [empty] [-1.0, 1.0] [-2.0, inf] = [empty];
    fma [empty] [entire] [-2.0, inf] = [empty];
    fma [entire] [empty] [-2.0, inf] = [empty];
    #fma [0.0] [empty] [-2.0, inf] = [empty];
    #fma [empty] [0.0] [-2.0, inf] = [empty];
    #fma [entire] [0.0] [-2.0, inf] = [-2.0, inf];
    fma [entire] [-5.0, -1.0] [-2.0, inf] = [entire];
    fma [entire] [-5.0, 3.0] [-2.0, inf] = [entire];
    fma [entire] [1.0, 3.0] [-2.0, inf] = [entire];
    fma [entire] [-inf, -1.0] [-2.0, inf] = [entire];
    fma [entire] [-inf, 3.0] [-2.0, inf] = [entire];
    fma [entire] [-5.0, inf] [-2.0, inf] = [entire];
    fma [entire] [1.0, inf] [-2.0, inf] = [entire];
    fma [entire] [entire] [-2.0, inf] = [entire];
    #fma [1.0, inf] [0.0] [-2.0, inf] = [-2.0, inf];
    fma [1.0, inf] [-5.0, -1.0] [-2.0, inf] = [entire];
    fma [1.0, inf] [-5.0, 3.0] [-2.0, inf] = [entire];
    fma [1.0, inf] [1.0, 3.0] [-2.0, inf] = [-1.0, inf];
    fma [1.0, inf] [-inf, -1.0] [-2.0, inf] = [entire];
    fma [1.0, inf] [-inf, 3.0] [-2.0, inf] = [entire];
    fma [1.0, inf] [-5.0, inf] [-2.0, inf] = [entire];
    fma [1.0, inf] [1.0, inf] [-2.0, inf] = [-1.0, inf];
    fma [1.0, inf] [entire] [-2.0, inf] = [entire];
    #fma [-1.0, inf] [0.0] [-2.0, inf] = [-2.0, inf];
    fma [-1.0, inf] [-5.0, -1.0] [-2.0, inf] = [entire];
    fma [-1.0, inf] [-5.0, 3.0] [-2.0, inf] = [entire];
    fma [-1.0, inf] [1.0, 3.0] [-2.0, inf] = [-5.0, inf];
    fma [-1.0, inf] [-inf, -1.0] [-2.0, inf] = [entire];
    fma [-1.0, inf] [-inf, 3.0] [-2.0, inf] = [entire];
    fma [-1.0, inf] [-5.0, inf] [-2.0, inf] = [entire];
    fma [-1.0, inf] [1.0, inf] [-2.0, inf] = [entire];
    fma [-1.0, inf] [entire] [-2.0, inf] = [entire];
    #fma [-inf, 3.0] [0.0] [-2.0, inf] = [-2.0, inf];
    fma [-inf, 3.0] [-5.0, -1.0] [-2.0, inf] = [-17.0, inf];
    fma [-inf, 3.0] [-5.0, 3.0] [-2.0, inf] = [entire];
    fma [-inf, 3.0] [1.0, 3.0] [-2.0, inf] = [entire];
    fma [-inf, 3.0] [-inf, -1.0] [-2.0, inf] = [entire];
    fma [-inf, 3.0] [-inf, 3.0] [-2.0, inf] = [entire];
    fma [-inf, 3.0] [-5.0, inf] [-2.0, inf] = [entire];
    fma [-inf, 3.0] [1.0, inf] [-2.0, inf] = [entire];
    fma [-inf, 3.0] [entire] [-2.0, inf] = [entire];
    #fma [-inf, -3.0] [0.0] [-2.0, inf] = [-2.0, inf];
    fma [-inf, -3.0] [-5.0, -1.0] [-2.0, inf] = [1.0, inf];
    fma [-inf, -3.0] [-5.0, 3.0] [-2.0, inf] = [entire];
    fma [-inf, -3.0] [1.0, 3.0] [-2.0, inf] = [entire];
    fma [-inf, -3.0] [-inf, -1.0] [-2.0, inf] = [1.0, inf];
    fma [-inf, -3.0] [-inf, 3.0] [-2.0, inf] = [entire];
    fma [-inf, -3.0] [-5.0, inf] [-2.0, inf] = [entire];
    fma [-inf, -3.0] [1.0, inf] [-2.0, inf] = [entire];
    fma [-inf, -3.0] [entire] [-2.0, inf] = [entire];
    #fma [0.0] [0.0] [-2.0, inf] = [-2.0, inf];
    #fma [0.0] [-5.0, -1.0] [-2.0, inf] = [-2.0, inf];
    #fma [0.0] [-5.0, 3.0] [-2.0, inf] = [-2.0, inf];
    #fma [0.0] [1.0, 3.0] [-2.0, inf] = [-2.0, inf];
    #fma [0.0] [-inf, -1.0] [-2.0, inf] = [-2.0, inf];
    #fma [0.0] [-inf, 3.0] [-2.0, inf] = [-2.0, inf];
    #fma [0.0] [-5.0, inf] [-2.0, inf] = [-2.0, inf];
    #fma [0.0] [1.0, inf] [-2.0, inf] = [-2.0, inf];
    #fma [0.0] [entire] [-2.0, inf] = [-2.0, inf];
    #fma [1.0, 5.0] [0.0] [-2.0, inf] = [-2.0, inf];
    fma [1.0, 5.0] [-5.0, -1.0] [-2.0, inf] = [-27.0, inf];
    fma [1.0, 5.0] [-5.0, 3.0] [-2.0, inf] = [-27.0, inf];
    fma [1.0, 5.0] [1.0, 3.0] [-2.0, inf] = [-1.0, inf];
    fma [1.0, 5.0] [-inf, -1.0] [-2.0, inf] = [entire];
    fma [1.0, 5.0] [-inf, 3.0] [-2.0, inf] = [entire];
    fma [1.0, 5.0] [-5.0, inf] [-2.0, inf] = [-27.0, inf];
    fma [1.0, 5.0] [1.0, inf] [-2.0, inf] = [-1.0, inf];
    fma [1.0, 5.0] [entire] [-2.0, inf] = [entire];
    #fma [-1.0, 5.0] [0.0] [-2.0, inf] = [-2.0, inf];
    fma [-1.0, 5.0] [-5.0, -1.0] [-2.0, inf] = [-27.0, inf];
    fma [-1.0, 5.0] [-5.0, 3.0] [-2.0, inf] = [-27.0, inf];
    fma [-10.0, 2.0] [-5.0, 3.0] [-2.0, inf] = [-32.0, inf];
    fma [-1.0, 5.0] [-1.0, 10.0] [-2.0, inf] = [-12.0, inf];
    fma [-2.0, 2.0] [-5.0, 3.0] [-2.0, inf] = [-12.0, inf];
    fma [-1.0, 5.0] [1.0, 3.0] [-2.0, inf] = [-5.0, inf];
    fma [-1.0, 5.0] [-inf, -1.0] [-2.0, inf] = [entire];
    fma [-1.0, 5.0] [-inf, 3.0] [-2.0, inf] = [entire];
    fma [-1.0, 5.0] [-5.0, inf] [-2.0, inf] = [entire];
    fma [-1.0, 5.0] [1.0, inf] [-2.0, inf] = [entire];
    fma [-1.0, 5.0] [entire] [-2.0, inf] = [entire];
    #fma [-10.0, -5.0] [0.0] [-2.0, inf] = [-2.0, inf];
    fma [-10.0, -5.0] [-5.0, -1.0] [-2.0, inf] = [3.0, inf];
    fma [-10.0, -5.0] [-5.0, 3.0] [-2.0, inf] = [-32.0, inf];
    fma [-10.0, -5.0] [1.0, 3.0] [-2.0, inf] = [-32.0, inf];
    fma [-10.0, -5.0] [-inf, -1.0] [-2.0, inf] = [3.0, inf];
    fma [-10.0, -5.0] [-inf, 3.0] [-2.0, inf] = [-32.0, inf];
    fma [-10.0, -5.0] [-5.0, inf] [-2.0, inf] = [entire];
    fma [-10.0, -5.0] [1.0, inf] [-2.0, inf] = [entire];
    fma [-10.0, -5.0] [entire] [-2.0, inf] = [entire];
    fma [empty] [empty] [entire] = [empty];
    fma [-1.0, 1.0] [empty] [entire] = [empty];
    fma [empty] [-1.0, 1.0] [entire] = [empty];
    fma [empty] [entire] [entire] = [empty];
    fma [entire] [empty] [entire] = [empty];
    #fma [0.0] [empty] [entire] = [empty];
    #fma [empty] [0.0] [entire] = [empty];
    #fma [entire] [0.0] [entire] = [entire];
    fma [entire] [-5.0, -1.0] [entire] = [entire];
    fma [entire] [-5.0, 3.0] [entire] = [entire];
    fma [entire] [1.0, 3.0] [entire] = [entire];
    fma [entire] [-inf, -1.0] [entire] = [entire];
    fma [entire] [-inf, 3.0] [entire] = [entire];
    fma [entire] [-5.0, inf] [entire] = [entire];
    fma [entire] [1.0, inf] [entire] = [entire];
    fma [entire] [entire] [entire] = [entire];
    #fma [1.0, inf] [0.0] [entire] = [entire];
    fma [1.0, inf] [-5.0, -1.0] [entire] = [entire];
    fma [1.0, inf] [-5.0, 3.0] [entire] = [entire];
    fma [1.0, inf] [1.0, 3.0] [entire] = [entire];
    fma [1.0, inf] [-inf, -1.0] [entire] = [entire];
    fma [1.0, inf] [-inf, 3.0] [entire] = [entire];
    fma [1.0, inf] [-5.0, inf] [entire] = [entire];
    fma [1.0, inf] [1.0, inf] [entire] = [entire];
    fma [1.0, inf] [entire] [entire] = [entire];
    #fma [-1.0, inf] [0.0] [entire] = [entire];
    fma [-1.0, inf] [-5.0, -1.0] [entire] = [entire];
    fma [-1.0, inf] [-5.0, 3.0] [entire] = [entire];
    fma [-1.0, inf] [1.0, 3.0] [entire] = [entire];
    fma [-1.0, inf] [-inf, -1.0] [entire] = [entire];
    fma [-1.0, inf] [-inf, 3.0] [entire] = [entire];
    fma [-1.0, inf] [-5.0, inf] [entire] = [entire];
    fma [-1.0, inf] [1.0, inf] [entire] = [entire];
    fma [-1.0, inf] [entire] [entire] = [entire];
    #fma [-inf, 3.0] [0.0] [entire] = [entire];
    fma [-inf, 3.0] [-5.0, -1.0] [entire] = [entire];
    fma [-inf, 3.0] [-5.0, 3.0] [entire] = [entire];
    fma [-inf, 3.0] [1.0, 3.0] [entire] = [entire];
    fma [-inf, 3.0] [-inf, -1.0] [entire] = [entire];
    fma [-inf, 3.0] [-inf, 3.0] [entire] = [entire];
    fma [-inf, 3.0] [-5.0, inf] [entire] = [entire];
    fma [-inf, 3.0] [1.0, inf] [entire] = [entire];
    fma [-inf, 3.0] [entire] [entire] = [entire];
    #fma [-inf, -3.0] [0.0] [entire] = [entire];
    fma [-inf, -3.0] [-5.0, -1.0] [entire] = [entire];
    fma [-inf, -3.0] [-5.0, 3.0] [entire] = [entire];
    fma [-inf, -3.0] [1.0, 3.0] [entire] = [entire];
    fma [-inf, -3.0] [-inf, -1.0] [entire] = [entire];
    fma [-inf, -3.0] [-inf, 3.0] [entire] = [entire];
    fma [-inf, -3.0] [-5.0, inf] [entire] = [entire];
    fma [-inf, -3.0] [1.0, inf] [entire] = [entire];
    fma [-inf, -3.0] [entire] [entire] = [entire];
    #fma [0.0] [0.0] [entire] = [entire];
    #fma [0.0] [-5.0, -1.0] [entire] = [entire];
    #fma [0.0] [-5.0, 3.0] [entire] = [entire];
    #fma [0.0] [1.0, 3.0] [entire] = [entire];
    #fma [0.0] [-inf, -1.0] [entire] = [entire];
    #fma [0.0] [-inf, 3.0] [entire] = [entire];
    #fma [0.0] [-5.0, inf] [entire] = [entire];
    #fma [0.0] [1.0, inf] [entire] = [entire];
    #fma [0.0] [entire] [entire] = [entire];
    #fma [1.0, 5.0] [0.0] [entire] = [entire];
    fma [1.0, 5.0] [-5.0, -1.0] [entire] = [entire];
    fma [1.0, 5.0] [-5.0, 3.0] [entire] = [entire];
    fma [1.0, 5.0] [1.0, 3.0] [entire] = [entire];
    fma [1.0, 5.0] [-inf, -1.0] [entire] = [entire];
    fma [1.0, 5.0] [-inf, 3.0] [entire] = [entire];
    fma [1.0, 5.0] [-5.0, inf] [entire] = [entire];
    fma [1.0, 5.0] [1.0, inf] [entire] = [entire];
    fma [1.0, 5.0] [entire] [entire] = [entire];
    #fma [-1.0, 5.0] [0.0] [entire] = [entire];
    fma [-1.0, 5.0] [-5.0, -1.0] [entire] = [entire];
    fma [-1.0, 5.0] [-5.0, 3.0] [entire] = [entire];
    fma [-10.0, 2.0] [-5.0, 3.0] [entire] = [entire];
    fma [-1.0, 5.0] [-1.0, 10.0] [entire] = [entire];
    fma [-2.0, 2.0] [-5.0, 3.0] [entire] = [entire];
    fma [-1.0, 5.0] [1.0, 3.0] [entire] = [entire];
    fma [-1.0, 5.0] [-inf, -1.0] [entire] = [entire];
    fma [-1.0, 5.0] [-inf, 3.0] [entire] = [entire];
    fma [-1.0, 5.0] [-5.0, inf] [entire] = [entire];
    fma [-1.0, 5.0] [1.0, inf] [entire] = [entire];
    fma [-1.0, 5.0] [entire] [entire] = [entire];
    #fma [-10.0, -5.0] [0.0] [entire] = [entire];
    fma [-10.0, -5.0] [-5.0, -1.0] [entire] = [entire];
    fma [-10.0, -5.0] [-5.0, 3.0] [entire] = [entire];
    fma [-10.0, -5.0] [1.0, 3.0] [entire] = [entire];
    fma [-10.0, -5.0] [-inf, -1.0] [entire] = [entire];
    fma [-10.0, -5.0] [-inf, 3.0] [entire] = [entire];
    fma [-10.0, -5.0] [-5.0, inf] [entire] = [entire];
    fma [-10.0, -5.0] [1.0, inf] [entire] = [entire];
    fma [-10.0, -5.0] [entire] [entire] = [entire];
    fma [0.1, 0.5] [-5.0, 3.0] [-0.1, 0.1] = [-0X1.4CCCCCCCCCCCDP+1, 0X1.999999999999AP+0];
    fma [-0.5, 0.2] [-5.0, 3.0] [-0.1, 0.1] = [-0X1.999999999999AP+0, 0X1.4CCCCCCCCCCCDP+1];
    fma [-0.5, -0.1] [2.0, 3.0] [-0.1, 0.1] = [-0X1.999999999999AP+0, -0X1.999999999999AP-4];
    fma [-0.5, -0.1] [-inf, 3.0] [-0.1, 0.1] = [-0X1.999999999999AP+0, inf];
}


testcase minimal.pown_test {
    pown [empty] 0 = [empty];
    #pown [entire] 0 = [1.0];
    #pown [0.0] 0 = [1.0];
    #pown [13.1] 0 = [1.0];
    #pown [-7451.145] 0 = [1.0];
    #pown [MAX] 0 = [1.0];
    #pown [-MAX] 0 = [1.0];
    #pown [0.0, inf] 0 = [1.0];
    #pown [-inf, 0.0] 0 = [1.0];
    #pown [-324.3, 2.5] 0 = [1.0];
    pown [empty] 2 = [empty];
    pown [entire] 2 = [0.0, inf];
    #pown [0.0] 2 = [0.0];
    #pown [13.1] 2 = [0X1.573851EB851EBP+7, 0X1.573851EB851ECP+7];
    #pown [-7451.145] 2 = [0X1.A794A4E7CFAADP+25, 0X1.A794A4E7CFAAEP+25];
    #pown [MAX] 2 = [MAX, inf];
    #pown [-MAX] 2 = [MAX, inf];
    pown [0.0, inf] 2 = [0.0, inf];
    pown [-inf, 0.0] 2 = [0.0, inf];
    pown [-324.3, 2.5] 2 = [0.0, 0X1.9AD27D70A3D72P+16];
    pown [0.01, 2.33] 2 = [0X1.A36E2EB1C432CP-14, 0X1.5B7318FC50482P+2];
    pown [-1.9, -0.33] 2 = [0X1.BE0DED288CE7P-4, 0X1.CE147AE147AE1P+1];
    pown [empty] 8 = [empty];
    pown [entire] 8 = [0.0, inf];
    #pown [0.0] 8 = [0.0];
    #pown [13.1] 8 = [0X1.9D8FD495853F5P+29, 0X1.9D8FD495853F6P+29];
    #pown [-7451.145] 8 = [0X1.DFB1BB622E70DP+102, 0X1.DFB1BB622E70EP+102];
    #pown [MAX] 8 = [MAX, inf];
    #pown [-MAX] 8 = [MAX, inf];
    pown [0.0, inf] 8 = [0.0, inf];
    pown [-inf, 0.0] 8 = [0.0, inf];
    pown [-324.3, 2.5] 8 = [0.0, 0X1.A87587109655P+66];
    pown [0.01, 2.33] 8 = [0X1.CD2B297D889BDP-54, 0X1.B253D9F33CE4DP+9];
    pown [-1.9, -0.33] 8 = [0X1.26F1FCDD502A3P-13, 0X1.53ABD7BFC4FC6P+7];
    pown [empty] 1 = [empty];
    pown [entire] 1 = [entire];
    #pown [0.0] 1 = [0.0];
    #pown [13.1] 1 = [13.1];
    #pown [-7451.145] 1 = [-7451.145];
    #pown [MAX] 1 = [MAX];
    #pown [-MAX] 1 = [-MAX];
    pown [0.0, inf] 1 = [0.0, inf];
    pown [-inf, 0.0] 1 = [-inf, 0.0];
    pown [-324.3, 2.5] 1 = [-324.3, 2.5];
    pown [0.01, 2.33] 1 = [0.01, 2.33];
    pown [-1.9, -0.33] 1 = [-1.9, -0.33];
    pown [empty] 3 = [empty];
    pown [entire] 3 = [entire];
    #pown [0.0] 3 = [0.0];
    #pown [13.1] 3 = [0X1.1902E978D4FDEP+11, 0X1.1902E978D4FDFP+11];
    #pown [-7451.145] 3 = [-0X1.81460637B9A3DP+38, -0X1.81460637B9A3CP+38];
    #pown [MAX] 3 = [MAX, inf];
    #pown [-MAX] 3 = [-inf, -MAX];
    pown [0.0, inf] 3 = [0.0, inf];
    pown [-inf, 0.0] 3 = [-inf, 0.0];
    pown [-324.3, 2.5] 3 = [-0X1.0436D2F418938P+25, 0X1.F4P+3];
    pown [0.01, 2.33] 3 = [0X1.0C6F7A0B5ED8DP-20, 0X1.94C75E6362A6P+3];
    pown [-1.9, -0.33] 3 = [-0X1.B6F9DB22D0E55P+2, -0X1.266559F6EC5B1P-5];
    pown [empty] 7 = [empty];
    pown [entire] 7 = [entire];
    #pown [0.0] 7 = [0.0];
    #pown [13.1] 7 = [0X1.F91D1B185493BP+25, 0X1.F91D1B185493CP+25];
    #pown [-7451.145] 7 = [-0X1.07B1DA32F9B59P+90, -0X1.07B1DA32F9B58P+90];
    #pown [MAX] 7 = [MAX, inf];
    #pown [-MAX] 7 = [-inf, -MAX];
    pown [0.0, inf] 7 = [0.0, inf];
    pown [-inf, 0.0] 7 = [-inf, 0.0];
    pown [-324.3, 2.5] 7 = [-0X1.4F109959E6D7FP+58, 0X1.312DP+9];
    pown [0.01, 2.33] 7 = [0X1.6849B86A12B9BP-47, 0X1.74D0373C76313P+8];
    pown [-1.9, -0.33] 7 = [-0X1.658C775099757P+6, -0X1.BEE30301BF47AP-12];
    pown [empty] -2 = [empty];
    pown [entire] -2 = [0.0, inf];
    #pown [0.0] -2 = [empty];
    #pown [13.1] -2 = [0X1.7DE3A077D1568P-8, 0X1.7DE3A077D1569P-8];
    #pown [-7451.145] -2 = [0X1.3570290CD6E14P-26, 0X1.3570290CD6E15P-26];
    #pown [MAX] -2 = [0X0P+0, 0X1P-1022];
    #pown [-MAX] -2 = [0X0P+0, 0X1P-1022];
    pown [0.0, inf] -2 = [0.0, inf];
    pown [-inf, 0.0] -2 = [0.0, inf];
    pown [-324.3, 2.5] -2 = [0X1.3F0C482C977C9P-17, inf];
    pown [0.01, 2.33] -2 = [0X1.793D85EF38E47P-3, 0X1.388P+13];
    pown [-1.9, -0.33] -2 = [0X1.1BA81104F6C8P-2, 0X1.25D8FA1F801E1P+3];
    pown [empty] -8 = [empty];
    pown [entire] -8 = [0.0, inf];
    #pown [0.0] -8 = [empty];
    #pown [13.1] -8 = [0X1.3CEF39247CA6DP-30, 0X1.3CEF39247CA6EP-30];
    #pown [-7451.145] -8 = [0X1.113D9EF0A99ACP-103, 0X1.113D9EF0A99ADP-103];
    #pown [MAX] -8 = [0X0P+0, 0X1P-1022];
    #pown [-MAX] -8 = [0X0P+0, 0X1P-1022];
    pown [0.0, inf] -8 = [0.0, inf];
    pown [-inf, 0.0] -8 = [0.0, inf];
    pown [-324.3, 2.5] -8 = [0X1.34CC3764D1E0CP-67, inf];
    pown [0.01, 2.33] -8 = [0X1.2DC80DB11AB7CP-10, 0X1.1C37937E08P+53];
    pown [-1.9, -0.33] -8 = [0X1.81E104E61630DP-8, 0X1.BC64F21560E34P+12];
    pown [empty] -1 = [empty];
    pown [entire] -1 = [entire];
    #pown [0.0] -1 = [empty];
    #pown [13.1] -1 = [0X1.38ABF82EE6986P-4, 0X1.38ABF82EE6987P-4];
    #pown [-7451.145] -1 = [-0X1.197422C9048BFP-13, -0X1.197422C9048BEP-13];
    #pown [MAX] -1 = [0X0P+0, 0X1P-1022];
    #pown [-MAX] -1 = [-0X1P-1022, -0X0P+0];
    pown [0.0, inf] -1 = [0.0, inf];
    pown [-inf, 0.0] -1 = [-inf, 0.0];
    pown [-324.3, 2.5] -1 = [entire];
    pown [0.01, 2.33] -1 = [0X1.B77C278DBBE13P-2, 0X1.9P+6];
    pown [-1.9, -0.33] -1 = [-0X1.83E0F83E0F83EP+1, -0X1.0D79435E50D79P-1];
    pown [empty] -3 = [empty];
    pown [entire] -3 = [entire];
    #pown [0.0] -3 = [empty];
    #pown [13.1] -3 = [0X1.D26DF4D8B1831P-12, 0X1.D26DF4D8B1832P-12];
    #pown [-7451.145] -3 = [-0X1.54347DED91B19P-39, -0X1.54347DED91B18P-39];
    #pown [MAX] -3 = [0X0P+0, 0X1P-1022];
    #pown [-MAX] -3 = [-0X1P-1022, -0X0P+0];
    pown [0.0, inf] -3 = [0.0, inf];
    pown [-inf, 0.0] -3 = [-inf, 0.0];
    pown [-324.3, 2.5] -3 = [entire];
    pown [0.01, 2.33] -3 = [0X1.43CFBA61AACABP-4, 0X1.E848P+19];
    pown [-1.9, -0.33] -3 = [-0X1.BD393CE9E8E7CP+4, -0X1.2A95F6F7C066CP-3];
    pown [empty] -7 = [empty];
    pown [entire] -7 = [entire];
    #pown [0.0] -7 = [empty];
    #pown [13.1] -7 = [0X1.037D76C912DBCP-26, 0X1.037D76C912DBDP-26];
    #pown [-7451.145] -7 = [-0X1.F10F41FB8858FP-91, -0X1.F10F41FB8858EP-91];
    #pown [MAX] -7 = [0X0P+0, 0X1P-1022];
    #pown [-MAX] -7 = [-0X1P-1022, -0X0P+0];
    pown [0.0, inf] -7 = [0.0, inf];
    pown [-inf, 0.0] -7 = [-inf, 0.0];
    pown [-324.3, 2.5] -7 = [entire];
    pown [0.01, 2.33] -7 = [0X1.5F934D64162A9P-9, 0X1.6BCC41E9P+46];
    pown [-1.9, -0.33] -7 = [-0X1.254CDD3711DDBP+11, -0X1.6E95C4A761E19P-7];
}

#testcase minimal.pow_test {
    #BOOST_CHECK(false);
#}

testcase minimal.exp_test {
    exp [empty] = [empty];
    exp [-inf, 0.0] = [0.0, 1.0];
    exp [0.0, inf] = [1.0, inf];
    exp [entire] = [0.0, inf];
    exp [-inf, 0X1.62E42FEFA39FP+9] = [0.0, inf];
    #exp [0X1.62E42FEFA39FP+9] = [0X1.FFFFFFFFFFFFFP+1023, inf];
    exp [0.0, 0X1.62E42FEFA39EP+9] = [1.0, 0X1.FFFFFFFFFC32BP+1023];
    #exp [-0X1.6232BDD7ABCD3P+9, 0X1.62E42FEFA39EP+9] = [0.0, 0X1.FFFFFFFFFC32BP+1023];
    exp [-0X1.6232BDD7ABCD3P+8, 0X1.62E42FEFA39EP+9] = [0X1.FFFFFFFFFFE7BP-512, 0X1.FFFFFFFFFC32BP+1023];
    exp [-0X1.6232BDD7ABCD3P+8, 0.0] = [0X1.FFFFFFFFFFE7BP-512, 1.0];
    exp [-0X1.6232BDD7ABCD3P+8, 1.0] = [0X1.FFFFFFFFFFE7BP-512, 0X1.5BF0A8B14576AP+1];
    exp [1.0, 5.0] = [0X1.5BF0A8B145769P+1, 0X1.28D389970339P+7];
    exp [-0X1.A934F0979A372P+1, 0X1.CEAECFEA8085AP+0] = [0X1.2797F0A337A5FP-5, 0X1.86091CC9095C5P+2];
    exp [0X1.87F42B972949CP-1, 0X1.8B55484710029P+6] = [0X1.1337E9E45812AP+1, 0X1.805A5C88021B6P+142];
    exp [0X1.78025C8B3FD39P+3, 0X1.9FD8EEF3FA79BP+4] = [0X1.EF461A783114CP+16, 0X1.691D36C6B008CP+37];
}

testcase minimal.exp2_test {
    exp2 [empty] = [empty];
    exp2 [-inf, 0.0] = [0.0, 1.0];
    exp2 [0.0, inf] = [1.0, inf];
    exp2 [entire] = [0.0, inf];
    exp2 [-inf, 1024.0] = [0.0, inf];
    #exp2 [1024.0] = [0X1.FFFFFFFFFFFFFP+1023, inf];
    exp2 [0.0, 1023.0] = [1.0, 0X1P+1023];
    exp2 [-1022.0, 1023.0] = [0X1P-1022, 0X1P+1023];
    exp2 [-1022.0, 0.0] = [0X1P-1022, 1.0];
    exp2 [-1022.0, 1.0] = [0X1P-1022, 2.0];
    exp2 [1.0, 5.0] = [2.0, 32.0];
    exp2 [-0X1.A934F0979A372P+1, 0X1.CEAECFEA8085AP+0] = [0X1.9999999999998P-4, 0X1.C000000000001P+1];
    exp2 [0X1.87F42B972949CP-1, 0X1.8B55484710029P+6] = [0X1.B333333333332P+0, 0X1.C81FD88228B4FP+98];
    exp2 [0X1.78025C8B3FD39P+3, 0X1.9FD8EEF3FA79BP+4] = [0X1.AEA0000721857P+11, 0X1.FCA0555555559P+25];
}

testcase minimal.exp10_test {
    exp10 [empty] = [empty];
    exp10 [-inf, 0.0] = [0.0, 1.0];
    exp10 [0.0, inf] = [1.0, inf];
    exp10 [entire] = [0.0, inf];
    exp10 [-inf, 0X1.34413509F79FFP+8] = [0.0, inf];
    #exp10 [0X1.34413509F79FFP+8] = [0X1.FFFFFFFFFFFFFP+1023, inf];
    exp10 [0.0, 0X1.34413509F79FEP+8] = [1.0, 0X1.FFFFFFFFFFBA1P+1023];
    #exp10 [-0X1.33A7146F72A42P+8, 0X1.34413509F79FEP+8] = [0.0, 0X1.FFFFFFFFFFBA1P+1023];
    exp10 [-0X1.22P+7, 0X1.34413509F79FEP+8] = [0X1.3FAAC3E3FA1F3P-482, 0X1.FFFFFFFFFFBA1P+1023];
    exp10 [-0X1.22P+7, 0.0] = [0X1.3FAAC3E3FA1F3P-482, 1.0];
    exp10 [-0X1.22P+7, 1.0] = [0X1.3FAAC3E3FA1F3P-482, 10.0];
    exp10 [1.0, 5.0] = [10.0, 100000.0];
    exp10 [-0X1.A934F0979A372P+1, 0X1.CEAECFEA8085AP+0] = [0X1.F3A8254311F9AP-12, 0X1.00B18AD5B7D56P+6];
    exp10 [0X1.87F42B972949CP-1, 0X1.8B55484710029P+6] = [0X1.75014B7296807P+2, 0X1.3EEC1D47DFB2BP+328];
    exp10 [0X1.78025C8B3FD39P+3, 0X1.9FD8EEF3FA79BP+4] = [0X1.0608D2279A811P+39, 0X1.43AF5D4271CB8P+86];
}

testcase minimal.log_test {
    log [empty] = [empty];
    log [-inf, 0.0] = [empty];
    log [0.0, 1.0] = [-inf, 0.0];
    log [1.0, inf] = [0.0, inf];
    log [0.0, inf] = [entire];
    log [entire] = [entire];
    #log [0.0, MAX] = [-inf, 0X1.62E42FEFA39FP+9];
    #log [1.0, MAX] = [0.0, 0X1.62E42FEFA39FP+9];
    #log [MIN, MAX] = [-0X1.6232BDD7ABCD3P+9, 0X1.62E42FEFA39FP+9];
    #log [MIN, 1.0] = [-0X1.6232BDD7ABCD3P+9, 0.0];
    #log [0X1.5BF0A8B145769P+1] = [0X1.FFFFFFFFFFFFFP-1, 0X1P+0];
    #log [0X1.5BF0A8B14576AP+1] = [0X1P+0, 0X1.0000000000001P+0];
    #log [MIN, 0X1.5BF0A8B14576AP+1] = [-0X1.6232BDD7ABCD3P+9, 0X1.0000000000001P+0];
    log [0X1.5BF0A8B145769P+1, 32.0] = [0X1.FFFFFFFFFFFFFP-1, 0X1.BB9D3BEB8C86CP+1];
    log [0X1.999999999999AP-4, 0X1.CP+1] = [-0X1.26BB1BBB55516P+1, 0X1.40B512EB53D6P+0];
    log [0X1.B333333333333P+0, 0X1.C81FD88228B2FP+98] = [0X1.0FAE81914A99P-1, 0X1.120627F6AE7F1P+6];
    log [0X1.AEA0000721861P+11, 0X1.FCA055555554CP+25] = [0X1.04A1363DB1E63P+3, 0X1.203E52C0256B5P+4];
}


testcase minimal.log2_test {
    log2 [empty] = [empty];
    log2 [-inf, 0.0] = [empty];
    log2 [0.0, 1.0] = [-inf, 0.0];
    log2 [1.0, inf] = [0.0, inf];
    log2 [0.0, inf] = [entire];
    log2 [entire] = [entire];
    #log2 [0.0, MAX] = [-inf, 1024.0];
    #log2 [1.0, MAX] = [0.0, 1024.0];
    #log2 [MIN, MAX] = [-1022.0, 1024.0];
    #log2 [MIN, 1.0] = [-1022.0, 0.0];
    #log2 [MIN, 2.0] = [-1022.0, 1.0];
    log2 [2.0, 32.0] = [1.0, 5.0];
    log2 [0X1.999999999999AP-4, 0X1.CP+1] = [-0X1.A934F0979A372P+1, 0X1.CEAECFEA8085AP+0];
    log2 [0X1.B333333333333P+0, 0X1.C81FD88228B2FP+98] = [0X1.87F42B972949CP-1, 0X1.8B55484710029P+6];
    log2 [0X1.AEA0000721861P+11, 0X1.FCA055555554CP+25] = [0X1.78025C8B3FD39P+3, 0X1.9FD8EEF3FA79BP+4];
}

testcase minimal.log10_test {
    log10 [empty] = [empty];
    log10 [-inf, 0.0] = [empty];
    log10 [0.0, 1.0] = [-inf, 0.0];
    log10 [1.0, inf] = [0.0, inf];
    log10 [0.0, inf] = [entire];
    log10 [entire] = [entire];
    #log10 [0.0, MAX] = [-inf, 0X1.34413509F79FFP+8];
    #log10 [1.0, MAX] = [0.0, 0X1.34413509F79FFP+8];
    #log10 [MIN, MAX] = [-0X1.33A7146F72A42P+8, 0X1.34413509F79FFP+8];
    #log10 [MIN, 1.0] = [-0X1.33A7146F72A42P+8, 0.0];
    #log10 [MIN, 10.0] = [-0X1.33A7146F72A42P+8, 1.0];
    log10 [10.0, 100000.0] = [1.0, 5.0];
    log10 [0X1.999999999999AP-4, 0X1.CP+1] = [-0X1P+0, 0X1.1690163290F4P-1];
    log10 [0X1.999999999999AP-4, 0X1.999999999999AP-4] = [-0X1P+0, -0X1.FFFFFFFFFFFFFP-1];
    log10 [0X1.B333333333333P+0, 0X1.C81FD88228B2FP+98] = [0X1.D7F59AA5BECB9P-3, 0X1.DC074D84E5AABP+4];
    log10 [0X1.AEA0000721861P+11, 0X1.FCA055555554CP+25] = [0X1.C4C29DD829191P+1, 0X1.F4BAEBBA4FA4P+2];
}

testcase minimal.sin_test {
    sin [empty] = [empty];
    sin [0.0, inf] = [-1.0, 1.0];
    sin [-inf, 0.0] = [-1.0, 1.0];
    sin [entire] = [-1.0, 1.0];
    #sin [0.0] = [0.0];
    #sin [0X1.921FB54442D18P+0] = [0X1.FFFFFFFFFFFFFP-1, 0X1P+0];
    #sin [0X1.921FB54442D19P+0] = [0X1.FFFFFFFFFFFFFP-1, 0X1P+0];
    sin [0X1.921FB54442D18P+0, 0X1.921FB54442D19P+0] = [0X1.FFFFFFFFFFFFFP-1, 0X1P+0];
    sin [0.0, 0X1.921FB54442D18P+0] = [0.0, 0X1P+0];
    sin [0.0, 0X1.921FB54442D19P+0] = [0.0, 0X1P+0];
    #sin [0X1.921FB54442D18P+1] = [0X1.1A62633145C06P-53, 0X1.1A62633145C07P-53];
    #sin [0X1.921FB54442D19P+1] = [-0X1.72CECE675D1FDP-52, -0X1.72CECE675D1FCP-52];
    sin [0X1.921FB54442D18P+1, 0X1.921FB54442D19P+1] = [-0X1.72CECE675D1FDP-52, 0X1.1A62633145C07P-53];
    sin [0.0, 0X1.921FB54442D18P+1] = [0.0, 1.0];
    sin [0.0, 0X1.921FB54442D19P+1] = [-0X1.72CECE675D1FDP-52, 1.0];
    sin [0X1.921FB54442D18P+0, 0X1.921FB54442D18P+1] = [0X1.1A62633145C06P-53, 0X1P+0];
    sin [0X1.921FB54442D18P+0, 0X1.921FB54442D19P+1] = [-0X1.72CECE675D1FDP-52, 0X1P+0];
    sin [0X1.921FB54442D19P+0, 0X1.921FB54442D18P+1] = [0X1.1A62633145C06P-53, 0X1P+0];
    sin [0X1.921FB54442D19P+0, 0X1.921FB54442D19P+1] = [-0X1.72CECE675D1FDP-52, 0X1P+0];
    #sin [-0X1.921FB54442D18P+0] = [-0X1P+0, -0X1.FFFFFFFFFFFFFP-1];
    #sin [-0X1.921FB54442D19P+0] = [-0X1P+0, -0X1.FFFFFFFFFFFFFP-1];
    sin [-0X1.921FB54442D19P+0, -0X1.921FB54442D18P+0] = [-0X1P+0, -0X1.FFFFFFFFFFFFFP-1];
    sin [-0X1.921FB54442D18P+0, 0.0] = [-0X1P+0, 0.0];
    sin [-0X1.921FB54442D19P+0, 0.0] = [-0X1P+0, 0.0];
    #sin [-0X1.921FB54442D18P+1] = [-0X1.1A62633145C07P-53, -0X1.1A62633145C06P-53];
    #sin [-0X1.921FB54442D19P+1] = [0X1.72CECE675D1FCP-52, 0X1.72CECE675D1FDP-52];
    sin [-0X1.921FB54442D19P+1, -0X1.921FB54442D18P+1] = [-0X1.1A62633145C07P-53, 0X1.72CECE675D1FDP-52];
    sin [-0X1.921FB54442D18P+1, 0.0] = [-1.0, 0.0];
    sin [-0X1.921FB54442D19P+1, 0.0] = [-1.0, 0X1.72CECE675D1FDP-52];
    sin [-0X1.921FB54442D18P+1, -0X1.921FB54442D18P+0] = [-0X1P+0, -0X1.1A62633145C06P-53];
    sin [-0X1.921FB54442D19P+1, -0X1.921FB54442D18P+0] = [-0X1P+0, 0X1.72CECE675D1FDP-52];
    sin [-0X1.921FB54442D18P+1, -0X1.921FB54442D19P+0] = [-0X1P+0, -0X1.1A62633145C06P-53];
    sin [-0X1.921FB54442D19P+1, -0X1.921FB54442D19P+0] = [-0X1P+0, 0X1.72CECE675D1FDP-52];
    sin [-0X1.921FB54442D18P+0, 0X1.921FB54442D18P+0] = [-0X1P+0, 0X1P+0];
    sin [-0X1.921FB54442D18P+0, 0X1.921FB54442D19P+0] = [-0X1P+0, 0X1P+0];
    sin [-0X1.921FB54442D19P+0, 0X1.921FB54442D18P+0] = [-0X1P+0, 0X1P+0];
    sin [-0X1.921FB54442D19P+0, 0X1.921FB54442D19P+0] = [-0X1P+0, 0X1P+0];
    sin [-0.7, 0.1] = [-0X1.49D6E694619B9P-1, 0X1.98EAECB8BCB2DP-4];
    sin [1.0, 2.0] = [0X1.AED548F090CEEP-1, 1.0];
    sin [-3.2, -2.9] = [-0X1.E9FB8D64830E3P-3, 0X1.DE33739E82D33P-5];
    sin [2.0, 3.0] = [0X1.210386DB6D55BP-3, 0X1.D18F6EAD1B446P-1];
}

testcase minimal.cos_test {
    cos [empty] = [empty];
    cos [0.0, inf] = [-1.0, 1.0];
    cos [-inf, 0.0] = [-1.0, 1.0];
    cos [entire] = [-1.0, 1.0];
    #cos [0.0] = [1.0];
    #cos [0X1.921FB54442D18P+0] = [0X1.1A62633145C06P-54, 0X1.1A62633145C07P-54];
    #cos [0X1.921FB54442D19P+0] = [-0X1.72CECE675D1FDP-53, -0X1.72CECE675D1FCP-53];
    cos [0X1.921FB54442D18P+0, 0X1.921FB54442D19P+0] = [-0X1.72CECE675D1FDP-53, 0X1.1A62633145C07P-54];
    cos [0.0, 0X1.921FB54442D18P+0] = [0X1.1A62633145C06P-54, 1.0];
    cos [0.0, 0X1.921FB54442D19P+0] = [-0X1.72CECE675D1FDP-53, 1.0];
    #cos [0X1.921FB54442D18P+1] = [-0X1P+0, -0X1.FFFFFFFFFFFFFP-1];
    #cos [0X1.921FB54442D19P+1] = [-0X1P+0, -0X1.FFFFFFFFFFFFFP-1];
    cos [0X1.921FB54442D18P+1, 0X1.921FB54442D19P+1] = [-0X1P+0, -0X1.FFFFFFFFFFFFFP-1];
    cos [0.0, 0X1.921FB54442D18P+1] = [-1.0, 1.0];
    cos [0.0, 0X1.921FB54442D19P+1] = [-1.0, 1.0];
    cos [0X1.921FB54442D18P+0, 0X1.921FB54442D18P+1] = [-1.0, 0X1.1A62633145C07P-54];
    cos [0X1.921FB54442D18P+0, 0X1.921FB54442D19P+1] = [-1.0, 0X1.1A62633145C07P-54];
    cos [0X1.921FB54442D19P+0, 0X1.921FB54442D18P+1] = [-1.0, -0X1.72CECE675D1FCP-53];
    cos [0X1.921FB54442D19P+0, 0X1.921FB54442D19P+1] = [-1.0, -0X1.72CECE675D1FCP-53];
    #cos [-0X1.921FB54442D18P+0] = [0X1.1A62633145C06P-54, 0X1.1A62633145C07P-54];
    #cos [-0X1.921FB54442D19P+0] = [-0X1.72CECE675D1FDP-53, -0X1.72CECE675D1FCP-53];
    cos [-0X1.921FB54442D19P+0, -0X1.921FB54442D18P+0] = [-0X1.72CECE675D1FDP-53, 0X1.1A62633145C07P-54];
    cos [-0X1.921FB54442D18P+0, 0.0] = [0X1.1A62633145C06P-54, 1.0];
    cos [-0X1.921FB54442D19P+0, 0.0] = [-0X1.72CECE675D1FDP-53, 1.0];
    #cos [-0X1.921FB54442D18P+1] = [-0X1P+0, -0X1.FFFFFFFFFFFFFP-1];
    #cos [-0X1.921FB54442D19P+1] = [-0X1P+0, -0X1.FFFFFFFFFFFFFP-1];
    cos [-0X1.921FB54442D19P+1, -0X1.921FB54442D18P+1] = [-0X1P+0, -0X1.FFFFFFFFFFFFFP-1];
    cos [-0X1.921FB54442D18P+1, 0.0] = [-1.0, 1.0];
    cos [-0X1.921FB54442D19P+1, 0.0] = [-1.0, 1.0];
    cos [-0X1.921FB54442D18P+1, -0X1.921FB54442D18P+0] = [-1.0, 0X1.1A62633145C07P-54];
    cos [-0X1.921FB54442D19P+1, -0X1.921FB54442D18P+0] = [-1.0, 0X1.1A62633145C07P-54];
    cos [-0X1.921FB54442D18P+1, -0X1.921FB54442D19P+0] = [-1.0, -0X1.72CECE675D1FCP-53];
    cos [-0X1.921FB54442D19P+1, -0X1.921FB54442D19P+0] = [-1.0, -0X1.72CECE675D1FCP-53];
    cos [-0X1.921FB54442D18P+0, 0X1.921FB54442D18P+0] = [0X1.1A62633145C06P-54, 1.0];
    cos [-0X1.921FB54442D18P+0, 0X1.921FB54442D19P+0] = [-0X1.72CECE675D1FDP-53, 1.0];
    cos [-0X1.921FB54442D19P+0, 0X1.921FB54442D18P+0] = [-0X1.72CECE675D1FDP-53, 1.0];
    cos [-0X1.921FB54442D19P+0, 0X1.921FB54442D19P+0] = [-0X1.72CECE675D1FDP-53, 1.0];
    cos [-0.7, 0.1] = [0X1.87996529F9D92P-1, 1.0];
    cos [1.0, 2.0] = [-0X1.AA22657537205P-2, 0X1.14A280FB5068CP-1];
    cos [-3.2, -2.9] = [-1.0, -0X1.F1216DBA340C8P-1];
    cos [2.0, 3.0] = [-0X1.FAE04BE85E5D3P-1, -0X1.AA22657537204P-2];
}

testcase minimal.tan_test {
    tan [empty] = [empty];
    tan [0.0, inf] = [entire];
    tan [-inf, 0.0] = [entire];
    tan [entire] = [entire];
    #tan [0.0] = [0.0];
    #tan [0X1.921FB54442D18P+0] = [0X1.D02967C31CDB4P+53, 0X1.D02967C31CDB5P+53];
    #tan [0X1.921FB54442D19P+0] = [-0X1.617A15494767BP+52, -0X1.617A15494767AP+52];
    tan [0X1.921FB54442D18P+0, 0X1.921FB54442D19P+0] = [entire];
    #tan [0X1.921FB54442D18P+1] = [-0X1.1A62633145C07P-53, -0X1.1A62633145C06P-53];
    #tan [0X1.921FB54442D19P+1] = [0X1.72CECE675D1FCP-52, 0X1.72CECE675D1FDP-52];
    tan [0.0, 0X1.921FB54442D18P+0] = [0.0, 0X1.D02967C31CDB5P+53];
    tan [0.0, 0X1.921FB54442D19P+0] = [entire];
    tan [0.0, 0X1.921FB54442D18P+1] = [entire];
    tan [0.0, 0X1.921FB54442D19P+1] = [entire];
    tan [0X1P-51, 0X1.921FB54442D18P+1] = [entire];
    tan [0X1P-51, 0X1.921FB54442D19P+1] = [entire];
    tan [0X1P-52, 0X1.921FB54442D18P+1] = [entire];
    tan [0X1P-52, 0X1.921FB54442D19P+1] = [entire];
    tan [-0X1.921FB54442D18P+0, 0X1.921FB54442D18P+0] = [-0X1.D02967C31CDB5P+53, 0X1.D02967C31CDB5P+53];
    tan [-0X1.921FB54442D18P+0, 0X1.921FB54442D19P+0] = [entire];
    tan [-0X1.921FB54442D19P+0, 0X1.921FB54442D18P+0] = [entire];
    tan [-0X1.921FB54442D19P+0, 0X1.921FB54442D19P+0] = [entire];
    tan [-0X1.555475A31A4BEP-2, 0X1.999999999999AP-4] = [-0X1.628F4FD931FEFP-2, 0X1.9AF8877430B81P-4];
    tan [0X1.4E18E147AE148P+12, 0X1.4E2028F5C28F6P+12] = [-0X1.D6D67B035B6B4P+2, -0X1.7E42B0760E3F3P+0];
    tan [0X1.4E18E147AE148P+12, 0X1.546028F5C28F6P+12] = [entire];
    tan [0X1.FAE147AE147AEP-1, 0X1.028F5C28F5C29P+0] = [0X1.860FADCC59064P+0, 0X1.979AD0628469DP+0];
}

testcase minimal.asin_test {
    asin [empty] = [empty];
    asin [0.0, inf] = [0.0, 0X1.921FB54442D19P+0];
    asin [-inf, 0.0] = [-0X1.921FB54442D19P+0, 0.0];
    asin [entire] = [-0X1.921FB54442D19P+0, 0X1.921FB54442D19P+0];
    asin [-1.0, 1.0] = [-0X1.921FB54442D19P+0, 0X1.921FB54442D19P+0];
    asin [-inf, -1.0] = [-0X1.921FB54442D19P+0, -0X1.921FB54442D18P+0];
    asin [1.0, inf] = [0X1.921FB54442D18P+0, 0X1.921FB54442D19P+0];
    #asin [-1.0] = [-0X1.921FB54442D19P+0, -0X1.921FB54442D18P+0];
    #asin [1.0] = [0X1.921FB54442D18P+0, 0X1.921FB54442D19P+0];
    #asin [0.0] = [0.0];
    asin [-inf, -0X1.0000000000001P+0] = [empty];
    asin [0X1.0000000000001P+0, inf] = [empty];
    asin [-0X1.999999999999AP-4, 0X1.999999999999AP-4] = [-0X1.9A49276037885P-4, 0X1.9A49276037885P-4];
    asin [-0X1.51EB851EB851FP-2, 0X1.FFFFFFFFFFFFFP-1] = [-0X1.585FF6E341C3FP-2, 0X1.921FB50442D19P+0];
    asin [-0X1.FFFFFFFFFFFFFP-1, 0X1.FFFFFFFFFFFFFP-1] = [-0X1.921FB50442D19P+0, 0X1.921FB50442D19P+0];
}

testcase minimal.acos_test {
    acos [empty] = [empty];
    acos [0.0, inf] = [0.0, 0X1.921FB54442D19P+0];
    acos [-inf, 0.0] = [0X1.921FB54442D18P+0, 0X1.921FB54442D19P+1];
    acos [entire] = [0.0, 0X1.921FB54442D19P+1];
    acos [-1.0, 1.0] = [0.0, 0X1.921FB54442D19P+1];
    acos [-inf, -1.0] = [0X1.921FB54442D18P+1, 0X1.921FB54442D19P+1];
    #acos [1.0, inf] = [0.0];
    #acos [-1.0] = [0X1.921FB54442D18P+1, 0X1.921FB54442D19P+1];
    #acos [1.0] = [0.0];
    #acos [0.0] = [0X1.921FB54442D18P+0, 0X1.921FB54442D19P+0];
    acos [-inf, -0X1.0000000000001P+0] = [empty];
    acos [0X1.0000000000001P+0, inf] = [empty];
    acos [-0X1.999999999999AP-4, 0X1.999999999999AP-4] = [0X1.787B22CE3F59P+0, 0X1.ABC447BA464A1P+0];
    acos [-0X1.51EB851EB851FP-2, 0X1.FFFFFFFFFFFFFP-1] = [0X1P-26, 0X1.E837B2FD13428P+0];
    acos [-0X1.FFFFFFFFFFFFFP-1, 0X1.FFFFFFFFFFFFFP-1] = [0X1P-26, 0X1.921FB52442D19P+1];
}

testcase minimal.atan_test {
    atan [empty] = [empty];
    atan [0.0, inf] = [0.0, 0X1.921FB54442D19P+0];
    atan [-inf, 0.0] = [-0X1.921FB54442D19P+0, 0.0];
    atan [entire] = [-0X1.921FB54442D19P+0, 0X1.921FB54442D19P+0];
    #atan [0.0] = [0.0];
    atan [1.0, 0X1.4C2463567C5ACP+25] = [0X1.921FB54442D18P-1, 0X1.921FB4E19ABD7P+0];
    atan [-0X1.FD219490EAAC1P+38, -0X1.1AF1C9D74F06DP+9] = [-0X1.921FB54440CEBP+0, -0X1.91ABE5C1E4C6DP+0];
}

#testcase minimal.atan2_test {
#        BOOST_CHECK(false);;
#}

testcase minimal.sinh_test {
    sinh [empty] = [empty];
    sinh [0.0, inf] = [0.0, inf];
    sinh [-inf, 0.0] = [-inf, 0.0];
    sinh [entire] = [entire];
    #sinh [0.0] = [0.0];
    sinh [1.0, 0X1.2C903022DD7AAP+8] = [0X1.2CD9FC44EB982P+0, 0X1.89BCA168970C6P+432];
    sinh [-0X1.FD219490EAAC1P+38, -0X1.1AF1C9D74F06DP+9] = [-inf, -0X1.53045B4F849DEP+815];
    sinh [-0X1.199999999999AP+0, 0X1.2666666666666P+1] = [-0X1.55ECFE1B2B215P+0, 0X1.3BF72EA61AF1BP+2];
}

testcase minimal.cosh_test {
    cosh [empty] = [empty];
    cosh [0.0, inf] = [1.0, inf];
    cosh [-inf, 0.0] = [1.0, inf];
    cosh [entire] = [1.0, inf];
    #cosh [0.0] = [1.0];
    cosh [1.0, 0X1.2C903022DD7AAP+8] = [0X1.8B07551D9F55P+0, 0X1.89BCA168970C6P+432];
    cosh [-0X1.FD219490EAAC1P+38, -0X1.1AF1C9D74F06DP+9] = [0X1.53045B4F849DEP+815, inf];
    cosh [-0X1.199999999999AP+0, 0X1.2666666666666P+1] = [1.0, 0X1.4261D2B7D6181P+2];
}

testcase minimal.tanh_test {
    tanh [empty] = [empty];
    tanh [0.0, inf] = [0.0, 1.0];
    tanh [-inf, 0.0] = [-1.0, 0.0];
    tanh [entire] = [-1.0, 1.0];
    #tanh [0.0] = [0.0];
    tanh [1.0, 0X1.2C903022DD7AAP+8] = [0X1.85EFAB514F394P-1, 0X1P+0];
    tanh [-0X1.FD219490EAAC1P+38, -0X1.1AF1C9D74F06DP+9] = [-0X1P+0, -0X1.FFFFFFFFFFFFFP-1];
    tanh [-0X1.199999999999AP+0, 0X1.2666666666666P+1] = [-0X1.99DB01FDE2406P-1, 0X1.F5CF31E1C8103P-1];
}

testcase minimal.asinh_test {
    asinh [empty] = [empty];
    asinh [0.0, inf] = [0.0, inf];
    asinh [-inf, 0.0] = [-inf, 0.0];
    asinh [entire] = [entire];
    #asinh [0.0] = [0.0];
    asinh [1.0, 0X1.2C903022DD7AAP+8] = [0X1.C34366179D426P-1, 0X1.9986127438A87P+2];
    asinh [-0X1.FD219490EAAC1P+38, -0X1.1AF1C9D74F06DP+9] = [-0X1.BB86380A6CC45P+4, -0X1.C204D8EB20827P+2];
    asinh [-0X1.199999999999AP+0, 0X1.2666666666666P+1] = [-0X1.E693DF6EDF1E7P-1, 0X1.91FDC64DE0E51P+0];
}

testcase minimal.acosh_test {
    acosh [empty] = [empty];
    acosh [0.0, inf] = [0.0, inf];
    acosh [1.0, inf] = [0.0, inf];
    #acosh [-inf, 1.0] = [0.0];
    acosh [-inf, 0X1.FFFFFFFFFFFFFP-1] = [empty];
    acosh [entire] = [0.0, inf];
    #acosh [1.0] = [0.0];
    acosh [1.0, 0X1.2C903022DD7AAP+8] = [0.0, 0X1.9985FB3D532AFP+2];
    acosh [0X1.199999999999AP+0, 0X1.2666666666666P+1] = [0X1.C636C1A882F2CP-2, 0X1.799C88E79140DP+0];
    acosh [0X1.14D4E82B2B26FP+15, 0X1.72DBE91C837B5P+29] = [0X1.656510B4BAEC3P+3, 0X1.52A415EE8455AP+4];
}

testcase minimal.atanh_test {
    atanh [empty] = [empty];
    atanh [0.0, inf] = [0.0, inf];
    atanh [1.0, inf] = [empty];
    atanh [-inf, 0.0] = [-inf, 0.0];
    atanh [-inf, -1.0] = [empty];
    atanh [-1.0, 1.0] = [entire];
    #atanh [0.0] = [0.0];
    #atanh [-1.0] = [empty];
    #atanh [1.0] = [empty];
    atanh [entire] = [entire];
    atanh [0X1.4C0420F6F08CCP-2, 0X1.FFFFFFFFFFFFFP-1] = [0X1.5871DD2DF9102P-2, 0X1.2B708872320E2P+4];
    atanh [-0X1.FFB88E9EB6307P-1, 0X1.999999999999AP-4] = [-0X1.06A3A97D7979CP+2, 0X1.9AF93CD234413P-4];
}

testcase minimal.sign_test {
    sign [empty] = [empty];
    #sign [1.0, 2.0] = [1.0];
    sign [-1.0, 2.0] = [-1.0, 1.0];
    sign [-1.0, 0.0] = [-1.0, 0.0];
    sign [0.0, 2.0] = [0.0, 1.0];
    #sign [-5.0, -2.0] = [-1.0];
    #sign [0.0] = [0.0];
    #sign [-0.0] = [0.0];
    #sign [-0.0, 0.0] = [0.0];
    sign [entire] = [-1.0, 1.0];
}

testcase minimal.ceil_test {
    ceil [empty] = [empty];
    ceil [entire] = [entire];
    #ceil [1.1, 2.0] = [2.0];
    ceil [-1.1, 2.0] = [-1.0, 2.0];
    ceil [-1.1, -0.4] = [-1.0, 0.0];
    ceil [-1.9, 2.2] = [-1.0, 3.0];
    ceil [-1.0, 2.2] = [-1.0, 3.0];
    ceil [-1.5, inf] = [-1.0, inf];
    ceil [-inf, 2.2] = [-inf, 3.0];
}

testcase minimal.floor_test {
    floor [empty] = [empty];
    floor [entire] = [entire];
    floor [1.1, 2.0] = [1.0, 2.0];
    floor [-1.1, 2.0] = [-2.0, 2.0];
    floor [-1.1, -0.4] = [-2.0, -1.0];
    floor [-1.9, 2.2] = [-2.0, 2.0];
    floor [-1.0, 2.2] = [-1.0, 2.0];
    floor [-1.5, inf] = [-2.0, inf];
    floor [-inf, 2.2] = [-inf, 2.0];
}

testcase minimal.trunc_test {
    trunc [empty] = [empty];
    trunc [entire] = [entire];
    trunc [1.1, 2.1] = [1.0, 2.0];
    trunc [-1.1, 2.0] = [-1.0, 2.0];
    trunc [-1.1, -0.4] = [-1.0, 0.0];
    trunc [-1.9, 2.2] = [-1.0, 2.0];
    trunc [-1.0, 2.2] = [-1.0, 2.0];
    trunc [-1.5, inf] = [-1.0, inf];
    trunc [-inf, 2.2] = [-inf, 2.0];
}

testcase minimal.round_ties_to_even_test {
    round_ties_to_even [empty] = [empty];
    round_ties_to_even [entire] = [entire];
    round_ties_to_even [1.1, 2.1] = [1.0, 2.0];
    round_ties_to_even [-1.1, 2.0] = [-1.0, 2.0];
    round_ties_to_even [-1.1, -0.4] = [-1.0, 0.0];
    round_ties_to_even [-1.9, 2.2] = [-2.0, 2.0];
    round_ties_to_even [-1.0, 2.2] = [-1.0, 2.0];
    #round_ties_to_even [1.5, 2.1] = [2.0];
    round_ties_to_even [-1.5, 2.0] = [-2.0, 2.0];
    round_ties_to_even [-1.1, -0.5] = [-1.0, 0.0];
    round_ties_to_even [-1.9, 2.5] = [-2.0, 2.0];
    round_ties_to_even [-1.5, 2.5] = [-2.0, 2.0];
    round_ties_to_even [-1.5, inf] = [-2.0, inf];
    round_ties_to_even [-inf, 2.2] = [-inf, 2.0];
}

testcase minimal.round_ties_to_away_test {
    round_ties_to_away [empty] = [empty];
    round_ties_to_away [entire] = [entire];
    round_ties_to_away [1.1, 2.1] = [1.0, 2.0];
    round_ties_to_away [-1.1, 2.0] = [-1.0, 2.0];
    round_ties_to_away [-1.1, -0.4] = [-1.0, 0.0];
    round_ties_to_away [-1.9, 2.2] = [-2.0, 2.0];
    round_ties_to_away [-1.0, 2.2] = [-1.0, 2.0];
    round_ties_to_away [0.5, 2.1] = [1.0, 2.0];
    round_ties_to_away [-2.5, 2.0] = [-3.0, 2.0];
    #round_ties_to_away [-1.1, -0.5] = [-1.0];
    round_ties_to_away [-1.9, 2.5] = [-2.0, 3.0];
    round_ties_to_away [-1.5, 2.5] = [-2.0, 3.0];
    round_ties_to_away [-1.5, inf] = [-2.0, inf];
    round_ties_to_away [-inf, 2.2] = [-inf, 2.0];
}

testcase minimal.abs_test {
    abs [empty] = [empty];
    abs [entire] = [0.0, inf];
    abs [1.1, 2.1] = [1.1, 2.1];
    abs [-1.1, 2.0] = [0.0, 2.0];
    abs [-1.1, -0.4] = [0.4, 1.1];
    abs [-1.9, 0.2] = [0.0, 1.9];
    abs [-1.5, inf] = [0.0, inf];
    abs [-inf, -2.2] = [2.2, inf];
}

testcase minimal.abs_rev_test {
    abs_rev [empty] [entire] = [empty];
    abs_rev [0.0, 1.0] [empty] = [empty];
    abs_rev [0.0, 1.0] [7.0, 9.0] = [empty];
    abs_rev [empty] [0.0, 1.0] = [empty];
    abs_rev [-2.0, -1.0] [entire] = [empty];
    abs_rev [1.0, 1.0] [entire] = [-1.0, 1.0];
    abs_rev [0.0, 0.0] [entire] = [0.0, 0.0];
    abs_rev [-1.0, -1.0] [entire] = [empty];
    abs_rev [0x1.FFFFFFFFFFFFFp1023, 0x1.FFFFFFFFFFFFFp1023] [entire] = [-0x1.FFFFFFFFFFFFFp1023, 0x1.FFFFFFFFFFFFFp1023];
    abs_rev [0x1p-1022, 0x1p-1022] [entire] = [-0x1p-1022, 0x1p-1022];
    abs_rev [-0x1p-1022, -0x1p-1022] [entire] = [empty];
    abs_rev [-0x1.FFFFFFFFFFFFFp1023, -0x1.FFFFFFFFFFFFFp1023] [entire] = [empty];
    abs_rev [1.0, 2.0] [entire] = [-2.0, 2.0];
    abs_rev [1.0, 2.0] [0.0, 2.0] = [1.0, 2.0];
    abs_rev [0.0, 1.0] [-0.5, 2.0] = [-0.5, 1.0];
    abs_rev [-1.0, 1.0] [entire] = [-1.0, 1.0];
    abs_rev [-1.0, 0.0] [entire] = [0.0, 0.0];
    abs_rev [0.0, inf] [entire] = [entire];
    abs_rev [entire] [entire] = [entire];
    abs_rev [-inf, 0.0] [entire] = [0.0, 0.0];
    abs_rev [1.0, inf] [-inf, 0.0] = [-inf, -1.0];
    abs_rev [-1.0, inf] [entire] = [entire];
    abs_rev [-inf, -1.0] [entire] = [empty];
    abs_rev [-inf, 1.0] [entire] = [-1.0, 1.0];
}

testcase minimal.min_test {
    min [empty] [1.0, 2.0] = [empty];
    min [1.0, 2.0] [empty] = [empty];
    min [empty] [empty] = [empty];
    min [entire] [1.0, 2.0] = [-inf, 2.0];
    min [1.0, 2.0] [entire] = [-inf, 2.0];
    min [entire] [entire] = [entire];
    min [empty] [entire] = [empty];
    min [1.0, 5.0] [2.0, 4.0] = [1.0, 4.0];
    min [1.0, 5.0] [2.0, 8.0] = [1.0, 5.0];
    min [1.0, 5.0] [entire] = [-inf, 5.0];
    min [-7.0, -5.0] [2.0, 4.0] = [-7.0, -5.0];
}

testcase minimal.max_test {
    max [empty] [1.0, 2.0] = [empty];
    max [1.0, 2.0] [empty] = [empty];
    max [empty] [empty] = [empty];
    max [entire] [1.0, 2.0] = [1.0, inf];
    max [1.0, 2.0] [entire] = [1.0, inf];
    max [entire] [entire] = [entire];
    max [empty] [entire] = [empty];
    max [1.0, 5.0] [2.0, 4.0] = [2.0, 5.0];
    max [1.0, 5.0] [2.0, 8.0] = [2.0, 8.0];
    max [-1.0, 5.0] [entire] = [-1.0, inf];
    max [-7.0, -5.0] [2.0, 4.0] = [2.0, 4.0];
}

testcase minimal.atan2_test {
    atan2 [empty] [empty] = [empty];
    atan2 [empty] [entire] = [empty];
    atan2 [entire] [empty] = [empty];
    atan2 [0.0, 0.0] [0.0, 0.0] = [empty];
    atan2 [entire] [entire] = [-0x1.921FB54442D19p1, +0x1.921FB54442D19p1];
    atan2 [0.0, 0.0] [-inf, 0.0] = [0x1.921FB54442D18p1, 0x1.921FB54442D19p1];
    atan2 [0.0, 0.0] [0.0, inf] = [0.0, 0.0];
    atan2 [0.0, inf] [0.0, 0.0] = [0x1.921FB54442D18p0, 0x1.921FB54442D19p0];
    atan2 [-inf, 0.0] [0.0, 0.0] = [-0x1.921FB54442D19p0, -0x1.921FB54442D18p0];
    atan2 [-0x1p-1022, 0.0] [-0x1p-1022, -0x1p-1022] = [-0x1.921FB54442D19p1, +0x1.921FB54442D19p1];
    atan2 [1.0, 1.0] [-1.0, -1.0] = [0x1.2D97C7F3321D2p1, 0x1.2D97C7F3321D3p1];
    atan2 [1.0, 1.0] [1.0, 1.0] = [0x1.921FB54442D18p-1, 0x1.921FB54442D19p-1];
    atan2 [-1.0, -1.0] [1.0, 1.0] = [-0x1.921FB54442D19p-1, -0x1.921FB54442D18p-1];
    atan2 [-1.0, -1.0] [-1.0, -1.0] = [-0x1.2D97C7F3321D3p1, -0x1.2D97C7F3321D2p1];
    atan2 [-0x1p-1022, 0x1p-1022] [-0x1p-1022, -0x1p-1022] = [-0x1.921FB54442D19p1, +0x1.921FB54442D19p1];
    atan2 [-0x1p-1022, 0x1p-1022] [0x1p-1022, 0x1p-1022] = [-0x1.921FB54442D19p-1, +0x1.921FB54442D19p-1];
    atan2 [-0x1p-1022, -0x1p-1022] [-0x1p-1022, 0x1p-1022] = [-0x1.2D97C7F3321D3p1, -0x1.921FB54442D18p-1];
    atan2 [0x1p-1022, 0x1p-1022] [-0x1p-1022, 0x1p-1022] = [0x1.921FB54442D18p-1, 0x1.2D97C7F3321D3p1];
    atan2 [-2.0, 2.0] [-3.0, -1.0] = [-0x1.921FB54442D19p1, +0x1.921FB54442D19p1];
    atan2 [0.0, 2.0] [-3.0, -1.0] = [0x1.0468A8ACE4DF6p1, 0x1.921FB54442D19p1];
    atan2 [1.0, 3.0] [-3.0, -1.0] = [0x1.E47DF3D0DD4Dp0, 0x1.68F095FDF593Dp1];
    atan2 [1.0, 3.0] [-2.0, 0.0] = [0x1.921FB54442D18p0, 0x1.56C6E7397F5AFp1];
    atan2 [1.0, 3.0] [-2.0, 2.0] = [0x1.DAC670561BB4Fp-2, 0x1.56C6E7397F5AFp1];
    atan2 [1.0, 3.0] [0.0, 2.0] = [0x1.DAC670561BB4Fp-2, 0x1.921FB54442D19p0];
    atan2 [1.0, 3.0] [1.0, 3.0] = [0x1.4978FA3269EE1p-2, 0x1.3FC176B7A856p0];
    atan2 [0.0, 2.0] [1.0, 3.0] = [0x0p0, 0x1.1B6E192EBBE45p0];
    atan2 [-2.0, 2.0] [1.0, 3.0] = [-0x1.1B6E192EBBE45p0, +0x1.1B6E192EBBE45p0];
    atan2 [-2.0, 0.0] [1.0, 3.0] = [-0x1.1B6E192EBBE45p0, 0x0p0];
    atan2 [-3.0, -1.0] [1.0, 3.0] = [-0x1.3FC176B7A856p0, -0x1.4978FA3269EE1p-2];
    atan2 [-3.0, -1.0] [0.0, 2.0] = [-0x1.921FB54442D19p0, -0x1.DAC670561BB4Fp-2];
    atan2 [-3.0, -1.0] [-2.0, 2.0] = [-0x1.56C6E7397F5AFp1, -0x1.DAC670561BB4Fp-2];
    atan2 [-3.0, -1.0] [-2.0, 0.0] = [-0x1.56C6E7397F5AFp1, -0x1.921FB54442D18p0];
    atan2 [-3.0, -1.0] [-3.0, -1.0] = [-0x1.68F095FDF593Dp1, -0x1.E47DF3D0DD4Dp0];
    atan2 [-2.0, 0.0] [-3.0, -1.0] = [-0x1.921FB54442D19p1, +0x1.921FB54442D19p1];
    atan2 [-5.0, 0.0] [-5.0, 0.0] = [-0x1.921FB54442D19p1, +0x1.921FB54442D19p1];
    atan2 [0.0, 5.0] [-5.0, 0.0] = [0x1.921FB54442D18p0, 0x1.921FB54442D19p1];
    atan2 [0.0, 5.0] [0.0, 5.0] = [0x0p0, 0x1.921FB54442D19p0];
    atan2 [-5.0, 0.0] [0.0, 5.0] = [-0x1.921FB54442D19p0, 0x0p0];
    atan2 [-0x1.FFFFFFFFFFFFFp1023, +0x1.FFFFFFFFFFFFFp1023] [-0x1.FFFFFFFFFFFFFp1023, -0x1.FFFFFFFFFFFFFp1023] = [-0x1.921FB54442D19p1, +0x1.921FB54442D19p1];
    atan2 [-0x1.FFFFFFFFFFFFFp1023, 0.0] [-0x1.FFFFFFFFFFFFFp1023, -0x1.FFFFFFFFFFFFFp1023] = [-0x1.921FB54442D19p1, +0x1.921FB54442D19p1];
    atan2 [0.0, +0x1.FFFFFFFFFFFFFp1023] [-0x1.FFFFFFFFFFFFFp1023, -0x1.FFFFFFFFFFFFFp1023] = [0x1.2D97C7F3321D2p1, 0x1.921FB54442D19p1];
    atan2 [-inf, +inf] [-0x1.FFFFFFFFFFFFFp1023, -0x1.FFFFFFFFFFFFFp1023] = [-0x1.921FB54442D19p1, +0x1.921FB54442D19p1];
    atan2 [-inf, 0.0] [-0x1.FFFFFFFFFFFFFp1023, -0x1.FFFFFFFFFFFFFp1023] = [-0x1.921FB54442D19p1, +0x1.921FB54442D19p1];
    atan2 [0.0, +inf] [-0x1.FFFFFFFFFFFFFp1023, -0x1.FFFFFFFFFFFFFp1023] = [0x1.921FB54442D18p0, 0x1.921FB54442D19p1];
    atan2 [-0x1.FFFFFFFFFFFFFp1023, +0x1.FFFFFFFFFFFFFp1023] [-inf, -0x1.FFFFFFFFFFFFFp1023] = [-0x1.921FB54442D19p1, +0x1.921FB54442D19p1];
    atan2 [-0x1.FFFFFFFFFFFFFp1023, 0.0] [-inf, -0x1.FFFFFFFFFFFFFp1023] = [-0x1.921FB54442D19p1, +0x1.921FB54442D19p1];
    atan2 [0.0, +0x1.FFFFFFFFFFFFFp1023] [-inf, -0x1.FFFFFFFFFFFFFp1023] = [0x1.2D97C7F3321D2p1, 0x1.921FB54442D19p1];
    atan2 [-0x1.FFFFFFFFFFFFFp1023, +0x1.FFFFFFFFFFFFFp1023] [0x1.FFFFFFFFFFFFFp1023, 0x1.FFFFFFFFFFFFFp1023] = [-0x1.921FB54442D19p-1, +0x1.921FB54442D19p-1];
    atan2 [-0x1.FFFFFFFFFFFFFp1023, 0.0] [0x1.FFFFFFFFFFFFFp1023, 0x1.FFFFFFFFFFFFFp1023] = [-0x1.921FB54442D19p-1, 0x0p0];
    atan2 [0.0, +0x1.FFFFFFFFFFFFFp1023] [0x1.FFFFFFFFFFFFFp1023, 0x1.FFFFFFFFFFFFFp1023] = [0x0p0, 0x1.921FB54442D19p-1];
    atan2 [-inf, +inf] [0x1.FFFFFFFFFFFFFp1023, 0x1.FFFFFFFFFFFFFp1023] = [-0x1.921FB54442D19p0, +0x1.921FB54442D19p0];
    atan2 [-inf, 0.0] [0x1.FFFFFFFFFFFFFp1023, 0x1.FFFFFFFFFFFFFp1023] = [-0x1.921FB54442D19p0, 0x0p0];
    atan2 [0.0, +inf] [0x1.FFFFFFFFFFFFFp1023, 0x1.FFFFFFFFFFFFFp1023] = [0x0p0, 0x1.921FB54442D19p0];
    atan2 [-0x1.FFFFFFFFFFFFFp1023, +0x1.FFFFFFFFFFFFFp1023] [0x1.FFFFFFFFFFFFFp1023, inf] = [-0x1.921FB54442D19p-1, +0x1.921FB54442D19p-1];
    atan2 [-0x1.FFFFFFFFFFFFFp1023, 0.0] [0x1.FFFFFFFFFFFFFp1023, inf] = [-0x1.921FB54442D19p-1, 0x0p0];
    atan2 [0.0, +0x1.FFFFFFFFFFFFFp1023] [0x1.FFFFFFFFFFFFFp1023, inf] = [0x0p0, 0x1.921FB54442D19p-1];
    atan2 [0x1.FFFFFFFFFFFFFp1023, 0x1.FFFFFFFFFFFFFp1023] [-0x1.FFFFFFFFFFFFFp1023, +0x1.FFFFFFFFFFFFFp1023] = [0x1.921FB54442D18p-1, 0x1.2D97C7F3321D3p1];
    atan2 [0x1.FFFFFFFFFFFFFp1023, 0x1.FFFFFFFFFFFFFp1023] [-0x1.FFFFFFFFFFFFFp1023, 0.0] = [0x1.921FB54442D18p0, 0x1.2D97C7F3321D3p1];
    atan2 [0x1.FFFFFFFFFFFFFp1023, 0x1.FFFFFFFFFFFFFp1023] [0.0, +0x1.FFFFFFFFFFFFFp1023] = [0x1.921FB54442D18p-1, 0x1.921FB54442D19p0];
    atan2 [0x1.FFFFFFFFFFFFFp1023, 0x1.FFFFFFFFFFFFFp1023] [-inf, +inf] = [0x0p0, 0x1.921FB54442D19p1];
    atan2 [0x1.FFFFFFFFFFFFFp1023, 0x1.FFFFFFFFFFFFFp1023] [-inf, 0.0] = [0x1.921FB54442D18p0, 0x1.921FB54442D19p1];
    atan2 [0x1.FFFFFFFFFFFFFp1023, 0x1.FFFFFFFFFFFFFp1023] [0.0, +inf] = [0x0p0, 0x1.921FB54442D19p0];
    atan2 [0x1.FFFFFFFFFFFFFp1023, inf] [-0x1.FFFFFFFFFFFFFp1023, +0x1.FFFFFFFFFFFFFp1023] = [0x1.921FB54442D18p-1, 0x1.2D97C7F3321D3p1];
    atan2 [0x1.FFFFFFFFFFFFFp1023, inf] [-0x1.FFFFFFFFFFFFFp1023, 0.0] = [0x1.921FB54442D18p0, 0x1.2D97C7F3321D3p1];
    atan2 [0x1.FFFFFFFFFFFFFp1023, inf] [0.0, +0x1.FFFFFFFFFFFFFp1023] = [0x1.921FB54442D18p-1, 0x1.921FB54442D19p0];
    atan2 [-0x1.FFFFFFFFFFFFFp1023, -0x1.FFFFFFFFFFFFFp1023] [-0x1.FFFFFFFFFFFFFp1023, +0x1.FFFFFFFFFFFFFp1023] = [-0x1.2D97C7F3321D3p1, -0x1.921FB54442D18p-1];
    atan2 [-0x1.FFFFFFFFFFFFFp1023, -0x1.FFFFFFFFFFFFFp1023] [-0x1.FFFFFFFFFFFFFp1023, 0.0] = [-0x1.2D97C7F3321D3p1, -0x1.921FB54442D18p0];
    atan2 [-0x1.FFFFFFFFFFFFFp1023, -0x1.FFFFFFFFFFFFFp1023] [0.0, +0x1.FFFFFFFFFFFFFp1023] = [-0x1.921FB54442D19p0, -0x1.921FB54442D18p-1];
    atan2 [-0x1.FFFFFFFFFFFFFp1023, -0x1.FFFFFFFFFFFFFp1023] [-inf, +inf] = [-0x1.921FB54442D19p1, 0x0p0];
    atan2 [-0x1.FFFFFFFFFFFFFp1023, -0x1.FFFFFFFFFFFFFp1023] [-inf, 0.0] = [-0x1.921FB54442D19p1, -0x1.921FB54442D18p0];
    atan2 [-0x1.FFFFFFFFFFFFFp1023, -0x1.FFFFFFFFFFFFFp1023] [0.0, +inf] = [-0x1.921FB54442D19p0, 0x0p0];
    atan2 [-inf, -0x1.FFFFFFFFFFFFFp1023] [-0x1.FFFFFFFFFFFFFp1023, +0x1.FFFFFFFFFFFFFp1023] = [-0x1.2D97C7F3321D3p1, -0x1.921FB54442D18p-1];
    atan2 [-inf, -0x1.FFFFFFFFFFFFFp1023] [-0x1.FFFFFFFFFFFFFp1023, 0.0] = [-0x1.2D97C7F3321D3p1, -0x1.921FB54442D18p0];
    atan2 [-inf, -0x1.FFFFFFFFFFFFFp1023] [0.0, +0x1.FFFFFFFFFFFFFp1023] = [-0x1.921FB54442D19p0, -0x1.921FB54442D18p-1];
}
